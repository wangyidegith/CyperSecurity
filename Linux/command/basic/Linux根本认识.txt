零 Linux根本理解（权限、shell、用户的关系）
（一）一个简单表述是：系统中的命令不是每个用户都能执行，不同用户可以执行的命令不同，有的权限高，有的权限低，而命名不都是操作文件吗（Linux下一切皆文件）。
1 比如sudo，说白了就是伪root，最高的是root，什么命令都能执行。

2 渗透测试的目标一般就是拿系统的shell，最高目标一般是拿root权限的shell。



（二）对权限、shell、用户三者关系的最终理解（我认为这一点是对Linux的最基本的理解）：权限即是用户对某个文件可以执行的shell命令。







一 命令解析器（shell）
（一）先通过一个操作实例理解shell：
什么计算机都是有shell的，
安卓手机、各种物联网设备也有啊，
我们一般通过USB连接安卓手机，
在电脑上使用一个叫ADB（Android Debug Bridge）的程序与安卓手机交互，你下载好了以后，配置一下PATH，就可以在命令行使用adb了，首先adb version测试下好了没，再adb devices查看安卓设备，使用adb kill-server停止，
然后我们具体可以做这些事：1 获得安卓机shell，命令：adb shell；2 做端口映射；3 文件传输；4 安装APK（Android Package），命令：adb install <apk path>,
我们当然也可以使用ssh登录安卓手机，但前提是你得在安卓机上安装sshd，具体操作步骤是：1 在安卓机上装一个Termux（获取安卓shell的一个软件，但是它拿不到root）；2 打开Termux，执行命令：apt update和apt install openssh；3 sshd启动openssh服务，Termux会开启一个8022端口（一般是，如果不是也可以用nmap扫）；4 修改密码：whoami得到用户名然后passwd改密码；5 ip a拿到安卓机IP地址，ssh 用户名@安卓机IP地址 -p 8022，登录了，
现在的问题是我还不知道怎么拿智能终端的root权限（越狱）。



（二）再明确shell的概念：
shell的位置：硬件 内核 shell 终端 用户
正如它的名字一样，shell就是内核的壳；
shell的定义：命令解析器，负责接收用户的命令然后让内核执行并显示执行结果，相当于开发中的系统调用；
Linux下一般是sh或者bash，一般是bash（相比sh更成熟）；
有一个根本命令：/bin/bash，该命令负责启动一个shell，且用于执行shell脚本这种可执行文件；
我们说shellcode有两个最最基本的功能：拿shell和回连，其中拿shell就是去执行/bin/bash。



（三）终端（tty）
定义：tty是一种设备（现在就是显示器）；
作用：负责用户和shell之间的交互；
类型：分为物理终端tty、虚拟终端tty和伪终端pts；
如何获取当前终端文件路径（终端号）：tty；
物理终端：事实上物理终端已经少见了，早期计算机会有专门配套的物理终端，早期Windows也这样，这种终端不支持多用户操作；
虚拟终端：使得一个内核可以被多个用户操作，即每个用户都可以获得一个shell，但是有限制，一般支持6个，你在本地打开的终端一般是虚拟终端；
伪终端（pts）：
ssh使用的tty显示就是pts；
由于它不是一个像显示器这样的真正的实体设备所以又叫伪终端；
每个伪终端都是对虚拟终端的虚拟；
who命令：使用who命令可以看到”谁正在使用这台主机？以及给他分配的终端号，比如pts/1，以及他的登录时间、以及它的源IP“，这是一个很有意义的命令。
你不是说下载文件，文件会在网络上传输，你cat一个文件，它也会在网络传输的，因而私钥看到不要看。







二 用户和组的概念（设计passwd、group、shadow、sudoers配置文件）
（一）用户（如下类型）：
0 管理员（也称超级用户）：root == Windows下的administrator
（0）root用户的意义：root用户无视任何权限限制，即可以操作一切文件。
（1）有且只有root用户可以创建其他用户，当其他用户刚被创建出来后，一般具有以下权限：
a 基本命令权限：新用户可以执行大多数基本命令，如 ls、cp、mv 等，但无法执行需要超级用户权限的命令（如 sudo 命令），因而从命令上来讲，权限只分为root用户和其他用户。
b 其他用户的文件：对于一个文件而言，有其属主，除了属主以外的用户都是其他人，那么新用户对于该文件而言自然也是其他人，那么新用户对该文件的权限得看该文件的o权限是怎么定义的。
c 自己的主目录（如果配置）：新用户对自己的主目录具有完全的读、写和执行权限。

1 普通用户：
（0）定义：有登录权限的用户，即在/etc/passwd中的shell为/bin/bash或者/bin/sh等命令解释器的用户。
（1）可以给普通用户添加他可以执行的sudo命令，配置方法关乎于/etc/sudoers文件：
该文件的核心配置指令就是这种配置语句：username    hosts=(users:groups) cmds，解释如下：
hosts：username可以在哪些host上获得该用户的权限。
users：username可以在以哪些用户的身份执行命令。这个有点难理解，其实就是：其实Linux下一切皆文件，权限就是看文件的ugo权限，那么假设一个名为wy的用户有一个文件的权限是：-rw-r-r，那么root显然是其他人啊，但是root也能改它执行它，因为root的users选项被配置为了ALL，意味着root可以获得任何用户的权限。
groups：和users一个道理。
cmds：username可以执行的sudo命令。
（2）ALL可适用于上面的四个选项的每一个，意味着全部。
（3）当你新建了一个用户wy，并在sudoers文件中这么配置：wy    ALL=(ALL:ALL) ALL，wy == 不能sudo cd的root。另外想要实现不能sudo cd的root，还有一个等价方法，那就是：sudo usermod -aG sudo wy，关于sudo组，要注意：Linux有sudo组但没有sudo用户。

2 systemd用户（系统服务用户）：
（0）定义：没有登录权限的用户，即在/etc/passwd中的shell为/usr/sbin/nologin或/bin/false的用户。
（1）意义：运行程序，比如著名的www-data用户就是web服务的systemd用户。
（2）有系统用户和服务用户之分，但是这种叫法主要用于体现权限的差别，系统用户的权限大一些，服务用户的权限小一些。



（二 ）组：
1 认清形式：组 == 主组 + 附加组，主组与生俱来（每个用户都有一个和用户名相同的组作为该用户的主组，该用户也作为该组成员的主用户），附加组可通过后天增删。
2 含义：同组用户具有该组主用户的权限。
3 一个用户至少有一个组，即其主组，但一个文件只能有一个组，文件创建时的组是创建这个文件的主组，后面可以改（chgrp命令）。







三 文件权限（通过文件类型的两个部分可以清晰的看到）
（一）用户和用户组



（二）一个二位数组：
第一层：用户、用户组、其他人。
第二层：rwxs == 421。
注意：若想设置SUID，则4ugo；若想设置SGID，则2ugo。

