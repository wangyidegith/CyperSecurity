启动gdb：
    1 gdb	你要调试的可执行程序名（需要gcc时-g编译）
    2 gdb调试运行中程序的两种方法：
        1 gdb
            attach pid
        2 gdb -p pid



展示代码（一次十行）：
    l    [行号][函数名][filename：行号或函数名]



设置断点：（***）
    文件是可以提供文件名直接访问到的，而不用管文件在哪
    b == break
    b    [行号][函数名][filename：行号或函数名]
设置条件断点：
    b    [行号][函数名][filename：行号或函数名]    value=10
删除断点：
    delete == del ==d
    d    断点编号



如何获取断点编号等信息（要获取什么信息，i它）：
    info == i
    i b    获取断点信息
    i threads    获取线程信息


如何在gdb下执行程序：
    start（开始执行，默认执行一行）
    n == next    一行一行的执行，不跳到语句块的内部
    s == step    一行一行的执行，跳到语句块的内部
    c == continue    执行到下一个断点处
    u    退出当前循环



注意：所有的变量名都可以是表达式
查看变量的值：
    p == print
    p i
查看变量的类型：
    ptype    i
设置变量的值：
    set    var     变量名 = 值
设置追踪变量（断点处展示该变量）：
    display 变量名
取消追踪变量：
    undisplay    编号
用于监视变量或内存地址的值变化的命令,当被监视的变量或内存地址的值发生改变时，程序会被暂停，以便你进行调试：
    watch    变量名



多线程调试：
拿tid：
    info threads
切换线程：
    thread tid



显示函数调用堆栈：
    backtrace（bt）
假设你现在在一个断点处，该命令允许你跳过当前函数的执行并停在调用该函数的位置，以便查看函数返回的结果或执行后续的调试操作：
    finish



退出gdb调试：
    quit
