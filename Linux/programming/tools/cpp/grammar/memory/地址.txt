注：和C语言的不同在于cpp的堆内存申请释放方式，cpp建议使用new和delete。







一 指针及指针变量
0 首先指针的叫法要明确，我们很多时候说指针其实是说指针变量而非指针，指针 == 地址。

1 指针的概念：指针是一个编号（长度取决于系统架构），表示每一个内存单元的位置。

2 指针变量的概念：
（1）简单说，存储指针的变量。
（2）这是一种复合数据类型，由指针和指针所指向的数据类型复合而成的

3 两个与指针相关的操作符：
（1）&：返回变量的地址
拿到这个数据的第一个内存单元的地址即首地址。
（2）*：返回指针变量指向的数据
拿的是该指针变量指向（所谓“指向”即是这个指针变量存的地址是另一片内存的首地址）的内存区的数据。

4 申请堆内存和释放堆内存
（0）C语言使用<stdlib.h>的四大函数：malloc、calloc、realloc、free。
（1）申请：
a 单个变量
int* p = new int;   // 申请一个整数的内存
*p = 10;          // 给这个整数赋值
b 数组
int* arr = new int[10];   // 申请一个包含10个整数的数组
for (int i = 0; i < 10; ++i) {
    arr[i] = i;   // 初始化数组
}
（2）释放
a 单个变量
delete p;   // 释放之前申请的单个整数内存
b 数组
delete[] arr;   // 释放之前申请的数组内存







二 引用
1 定义：指针*，引用&

2 初始化：指针可以不初始化，也可以设置为NULL，引用必须在声明时初始化，也就没有空引用的概念。

3 可变性：指针除了常指针以外可以随便换指向，引用一旦初始化就是常引用而不用非得使用const修饰。

注：int& == int* const && ！=const int*，const int& == int* const + const int*，没有int& const这种语法，指向本就是常量。

4 内存管理：指针可以指向new的内存，也可以指向已经申请好的内存，但是引用不可以使用new，只能指向已经申请好的内存。

5 运算符重载：指针可以进行加减（不能进行乘除），引用什么都不能。

6 使用：指针需要解引用，引用直接用就行了。
