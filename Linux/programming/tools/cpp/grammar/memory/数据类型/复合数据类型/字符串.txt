零 C语言字符串
（一）概念：作为一种复合数据类型，是指针或数组和字符的结合。



（二）结束标志：一个字符串以“\0”为结束标志。



（三）地位：最常见数据类型，在任何语言中都是。



（四）从内存角度理解三种不同的字符串（首先，"hello"我们把他叫字符串字面值，它本来就是常量，本来就在常量区）
1 常量区：
char* str = "hello";   // 如果你修改，编译时不会报错，但是运行时会出现段错误，因而一般我们都这样定义：const char* str = "hello";，这样定义在编译时就会报错，以避免程序员的误操作，另外要区分：char* const str = "hello";，这是在定义常指针而非字符串常量。

2 栈区（就是定义字符数组）：
char str_var1[] = {' ', 'w', 'o', 'r', 'l', 'd', '!', '\0'};   // 必须写上'\0'，系统不会为这种定义出来的字符串添加'\0'
char str_var2[] = {" world!"};   // 不常见
char str_var3[] = " world!";   // 定义字符数组的主要方式，这里其实就是我们将一个字符串字面值复制到了栈上，这个字面值在常量区是存在的

3 堆区：
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
  char* str_var = (char*)malloc(100);
  memset((void*)str_var, '\0', 100);
  char* str_hw = (char*)memcpy((void*)str_var, "hello world!", strlen("hello world!"));
  *(++str_hw) = '0';
  printf("Can str_var be altered? ------- %s\n", str_var);
  return 0;
}



（五）字符串长度问题汇总
0 不管你加不加\0，都会给你加上。
#include <stdio.h>
#include <string.h> 
int main() {
        printf("string' length is %ld (sizeof)\n", sizeof("hello"));   // 6
        printf("string' length is %ld (sizeof with \\0)\n", sizeof("hello\0"));   // 7
        return 0;
}
因而，我们最好不要自己加，因为反正都会给我们加。

1 两种长度
（1）无'\0'长度（这就是字符串长度）：strlen(字符串)
（2）有'\0'长度（字符串内存长度）：strlen(字符串) + 1 == sizeof(字符串字面值)

2 切记不要使用sizeof去测算任何字符串类型而不管它是使用哪一种方式定义出来的，因为测出来的不一定真实的字符串长度。
（1）用sizeof测字符串字面值，得到的是：strlen(字符串) + 1
（2）用sizeof测字符串常量，得到的是：指针类型长度（指针类型长度永远为8）。
（3）用sizeof测字符数组，得到的是：strlen(字符串) + 1
（4）用sizeof测堆区字符串，得到的是：指针类型长度（指针类型长度永远为8）。



（六）经验之谈：在实际工作中，我们经常会申请一片比最大字符串长度大1的内存空间，先全部置为“\0”，然后进行存取，以免出现溢出。



（七）常用库函数：这个很重要，强调一下，请见库。







一 cpp字符串
0 就是stl string容器（最大特点动态）。

1 string容器就没有常量区一说，但你要知道，不管是C语言还是C++，"hello"这都是常量值，只是C语言使用指针直接指向常量，而C++将常量值复制到了栈区或堆区。

2 new是堆区，你得去delete。

3 std::string str = "hello";   // 这是栈区，但是如果要扩容，C++内部将在堆区申请内存，但是这不需要你管，因为谁malloc谁free这是编程的永恒原则，stl更得遵循，但你要知道这里会产生复制，因为复制意味着性能问题。
