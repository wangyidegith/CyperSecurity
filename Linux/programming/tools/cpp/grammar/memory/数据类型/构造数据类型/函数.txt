一 概念：
1 实际上我们一般不说函数是数据类型，但是函数本身是一种在栈上分配内存的构造数据类型，相比于结构体这样的典型的数据类型，函数的特殊之处在于，它是被调用而不是像结构体、类一样用作实例化对象。

2 函数到底是个什么？编程语言中的函数概念要比数学中的函数概念更加宽泛，但是二者本质并无差别，都是由三要素构成：输入、处理、输出，比如y = x + 1这是一个函数，x = 1是输入，x + 1是处理方法，y = 2是输出。







二 函数三要素
1 参数：是局部变量

2 函数体：算法

3 返回值：只能返回一个值







三 和指针的结合：
1 传出参数：解决只能返回一个值的情况，且提供用户接口，用途相当广泛。

2 指针性函数：返回值是一个指针，注意不要返回局部变量的地址，会造成野指针。

3 函数指针变量：
（1）函数名和数组名同理；
（2）用途：
a 大名鼎鼎的回调函数，给函数传函数；
b 动态调用机制，增加灵活性，也是多态的实现基础。
（3）定义方式：
在函数内定义：返回类型 (*指针变量名)(参数类型1, 参数类型2, ...);   // 指针型函数的原型是：返回类型 *指针变量名(参数类型1, 参数类型2, ...);
在函数外定义：typedef 返回类型 (*指针变量名)(参数类型1, 参数类型2, ...);







四 内联函数：直接展开而非调用。
1 内联函数只是建议：inline关键字是对编译器的一个建议，编译器可以选择忽略这个建议。在实际编译时，编译器会根据具体情况来决定是否将函数内联。

2 函数体不宜过大（最好一行且频繁调用，很多getset函数设置为内联非常合适）：内联函数的函数体不应该过大，因为如果函数体太大，内联后可能会增加代码的大小，反而降低程序的性能。

3 递归函数不能内联：递归函数不能被声明为内联函数，因为内联函数的展开需要在编译时确定，而递归函数的展开是运行时行为。

4 内联函数的定义应该放在头文件中：为了确保在编译时能够展开函数体，内联函数的定义通常放在头文件中，这样在每个包含该头文件的源文件中都可以看到函数的定义。

5 cpp的内联函数和C语言一样，但是类内部你直接写函数体而非原型声明的函数就是内联函数，getset函数设置为这么做很合适。
