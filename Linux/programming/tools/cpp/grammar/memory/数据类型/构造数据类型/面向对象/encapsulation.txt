零 概念
（零） 类和对象之间的关系是声明和定义的关系。



（一） 声明、定义、初始化
1 声明：struct换成class。

2 定义：
（1）栈上定义。
（2）堆上定义：不要用malloc了，用new。

3 初始化：看如下实例：
`
class MyClass {   // 这是一个类
public:
    int myNum;
    MyClass(int num) {
        this.myNum = num;
    }
    void display() {
        cout << myNum << endl;
    }
};
MyClass mc(123);   // 栈定义和初始化
MyClass mc = new MyClass(123);   // 对上定义和初始化
`



（二）this指针：
1 含义：当你创建一个对象后，该对象就在类内就由this指针指向。

2 习惯：虽然this指针不是必须的，但是为了程序的清晰度请严格使用。



（三）成员分类：
1 数据成员

2 成员函数







一 修饰
（零）我们已经熟悉的修饰符在面向对象上的应用
1 static：
（1）修饰数据成员表示该数据归类所有，修饰函数表示该函数只能操作static成员（没有this指针）。
（2）static成员必须在类外定义在类内声明。
（3）static不能修饰class。

2 const
（1）修饰数据成员表示该数据不能被修改，修饰函数表示该函数不能修改任何成员。

3 inline
（1）在类内写函数体默认就是内联的。
（2）getset一般写成内联。

4 friend：将其他函数或者类声明为某个类的友元，该类的实例可以使用之。



（一）访问修饰符
1 private：仅在类内部可用。

2 protected：仅在类内部和派生类中可用。

3 public：外部可以访问 == 对象可以访问。







二 特殊函数（其实就是注册）
（一）构造函数
1 作用：初始化。

2 特点：
（1）函数名和类名一样。
（2）没有返回值。
（3）参数是重点但是构造函数里可以做任何事情而非仅仅接收操作参数。

3 定义方式
（1）
`
class MyClass {
public:
    int myNum;
    MyClass(int num) {
        this.myNum = num;   // 正常
    }
    void display() {
        cout << myNum << endl;
    }
};
`
（2）
`
class MyClass {
public:
    int myNum;
    MyClass(int num) : mynum(num){   // 建议这么写，以区分接收参数和处理的代码
    }
    void display() {
        cout << myNum << endl;
    }
};
`



（二）析构函数
1 作用：销毁。

2 特点：
（1）函数名 == ~类名。
（2）没有返回值。
（3）无参数。

3 经验之谈：事实上析构函数的用法更多得看实际情况，你要看看你在对象销毁时到底要做什么，至少你知道你得free掉在堆上申请的内存吧。


（三）拷贝构造函数
1 作用：值传递
（1）初始化，对于指针和基本数据类型，比如：
`
char* s = "hello";
char* ss = s;
`
这当然完全可行，但是：
class c {
public:
    int a;
    char* s = "hello"; 
};
c c;
c cc = 1;   // 这可行吗？ 
`
显然不可行，因而就需要拷贝构造函数.
（2）参数值传递。
（3）返回值传递。
