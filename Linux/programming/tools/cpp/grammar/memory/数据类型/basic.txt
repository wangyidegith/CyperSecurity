零 数据类型分类
1 基本数据类型

2 复合数据类型

3 构造数据类型







一 数据声明、定义、初始化
1 声明：我要用这个东西，但是还没用它，你不要给我申请内存空间。

2 定义：我现在就要用这个东西，你给我申请好内存空间。
注：对于基本数据类型、复合数据类型（指针、数组、字符串）的指针，声明和定义同时进行。

3 初始化：定义时赋值。
这里有一个问题，如果不初始化，各种数据类型的默认值是什么？（最好严格进行初始化）
a const必须初始化；
b static默认值为0；
c 指针默认指为NULL；
d 其他数据类型的默认值随机；



二 typedef
1 语法：typedef 旧数据类型 新数据类型

2 typedef 和 #define的区别
（1）typedef 仅限于为类型定义符号名称，#define 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE；
（2）typedef 是由编译器执行解释的，#define 语句是由预编译器进行处理的。

3 经典用法：
typedef struct
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} Book;

4 对于基本数据类型typedef出来的命名规则最好使用“原数据名_t”作为结尾以进行标识和区分。







三 类型转换
（一）大小问题：
1 基本的大小问题：
比如int和long，一个4B，一个8B，int转long是小转大，long转int是大转小，这个大小肉眼可见。

2 思考：
（1）那么如果是int和float呢？
这两个可都是4B啊，浮点数大于整数。
（2）那如果是int和unsigned int呢？
这两个也都是4B，按存储方式来看，unsigned更大，因而有符号转无符号是小转大，无符号转有符号是大转小。



（二）自动类型转换：“无所谓，编译器会出手”。
1 不同类型的数据运算：
（1）有浮点数（不管是float还是double），所有对象统一转double；
（2）没浮点数，有大则转大。

2 不同类型的数据赋值：
右边的转成左边的。这个得视具体情况而定，有的时候有的编译器会报错，有的则进行转换。
注：类型转换所存在的问题：小转大一般没有什么问题，唯一的问题是造成了内存浪费，大转小问题就大了，可能会造成数据的精度丢失甚至截断，上世纪90年代的一次火箭发射事故的原因就在于一行未进行强制类型转换的代码引发的运算错误，所以最好不要让编译器帮你做自动类型转换当然对于自动大转小编译器一般也就不给通过，而是最好由也必须由程序员做强制类型转换，也就是说一个好的程序员必须知道自己在做什么。



（三）强制类型转换：
1 语法：
（1）c风格：(type_name) expression
（2）四个cast运算符。

2 强制类型转换的核心用法：你可以设置一根void*指针用来接收任何数据类型的指针变量（反正对于指针而言都是去拿首地址）然后再转换成其他数据类型（比如把char*转成某种struct*，亦或把某种struct*转成char*）。
