零 基本概念
1 从广义上看，int也是数据结构，if也是算法.

2 狭义上，
数据结构指基于基本数据类型的复杂的数据组织和存储方式，所谓存储就是结构，所谓组织就是增删查改。
算法指基于流程控制的复杂的数据处理过程。
二者关系：算法要处理的数据往往是数据结构。
所以数据结构是算法的基础。







一 数据结构
1 数据结构分为逻辑结构和存储结构，逻辑结构有线性表（一对一）、树（一对多）、图（多对多），存储结构有顺序存储结构和链式存储结构。

2 二者区别和关系：逻辑结构是面向上层的，即从用户的角度考虑选择哪种数据结构合适，存储结构是面向下层的，即实现该逻辑结构时具体如何做。

3 数据结构的核心问题在于如何选择合适的逻辑结构和存储结构：
（1）选择逻辑结构时要看数据的形式，即几对几。
（2）选择存储结构是一个非常重要的问题：
首先顺序结构的优点在于可以更高效地利用内存（不容易产生碎片化且不需要额外空间存储指针），缓存命中率（缓冲效率）更高，查询的效率也更高，因而顺序结构总是受到程序员的欢迎的，如果能选它应该尽量选它；
但是它的缺点在于不灵活（容易造成内存浪费或者扩容不便），因而有些强调灵活性的场景不得不弃用数组而使用链式结构。







二 算法
（零）基本问题
1 算法首先要能解决问题，其次要能“尽可能好”的解决问题。

2 所谓“尽可能好”是指“既快又省”，既运行时间快，又节省内存空间。

3 算法效率是评价算法优劣的指标，算法效率的评估有两种方法，实际测试和理论估算。
（1）实际测试受限于环境且耗费巨大，一般不用。
（2）我们一般使用理论估算的方法，这种方法使用函数渐近上限的方法。
时间复杂度：1 < logn < n < nlogn < n^2 < 2^n < n!
空间复杂度：1 < logn < n < n^2 < 2^n
注意：
测试复杂度时，一般是可以直观看出来的，但是面对复杂迭代和递归的场景并不容易，可以先记下来形式。
一般情况下，我们认为时间比空间更宝贵。







（二）两种基本的算法：迭代和递归
1 迭代：迭代就是循环
迭代的核心思想是从小到大一步一步解决问题，

2 递归：递归就是栈
（1）递归的核心思想是将大问题分解为小问题，每次解决一个小问题，然后最终解决问题。
（2）递归的三个要素：
递：入栈
终止：符合终止条件则由“递”转“归”
归：出栈
（3）递归的三个问题：
第一个：由于递归是自己调用自己，所以会大量消耗栈空间，调用次数过多会导致栈溢出。
第二个：普通递归是入栈只入，出栈过程中进行计算，尾递归是入栈算，出栈只出，另外，尾递归的表现形式为“return 递归函数”。关于这一点，有如下作证程序（以1-100累加为例）：
a 普通递归：
#include <stdio.h>

int func(int s, const int e, int total = 0) {
    if(s > e) {
        return total;
    }
    total = s + total;
    s++;
    return func(s, e, total);
}

int main() {
    int result = func(1, 100);
    printf("The result of func is: %d\n", result);
    return 0;
}
b 尾递归：
#include <stdio.h>

int func(int s, const int e) {
    if(s >= e) {
        return s;
    }
    return s + func(s+1, e);
}

int main() {
    int result = func(1, 100);
    printf("The result of func is: %d\n", result);
    return 0;
}
第三个：如果多次调用递归函数，则会形成递归树。

3 二者对比：迭代和递归的实现思想正好相反，递归相比迭代更适合复杂问题的解决，但是消耗时间和空间。
