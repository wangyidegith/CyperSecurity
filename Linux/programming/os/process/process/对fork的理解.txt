零 基本概念：
1 通过fork函数创建子进程实现多进程。

2 fork函数这个函数本身非常简单，但是这个函数的理解却是非常难的：
（1）产生的子进程不会从头执行而是从fork之后开始执行，理解这一点对于理解为什么循环创建多个子进程时会产生2的n次方-1个进程至关重要；
（2）一个多进程程序的基本写法是：通过if判断fork的返回值以确定父进程下执行什么代码，子进程下执行什么代码。（一个源文件或者说一个可执行程序创建多个进程，每个进程实现不同功能）。







一 父子区分
1 进程id

2 fork返回值

3 父进程id

4 进程运行时间

5 闹钟（定时器）

6 未决信号集

7 除了上面这些以外剩下的都是相同的。







二 底层实现：现代操作系统为了节省宝贵的内存空间，fork时并不会完全复制一份地址空间出来，而是遵循【读时共享写时复制】的原则。







三 fork（复刻）这个函数关键是要理解两点：
1 多次fork会形成二叉树结构，也就是说父进程也fork了；

2 写独占读共享那是操作系统的事，不是用户的事，作为一个程序员，你就认为fork是完全复制了一份到了一个进程就行了，读和写都是独占fork之前的数据的。







四 特殊进程
1 默认父进程（init进程）：pid == 1

2 孤儿进程：父进程死了，子进程还活着，该子进程叫孤儿进程，其父亲由原来的父进程变成了init进程。
先明白一件事：一个进程在终止时os的隐式回收机制会做两件事：
（1）释放其用户空间内存；
（2）关闭所有fd。
（3）但是它的PCB还保留在内核中，内核在其PCB中保存了一些信息：如果该进程是正常终止则保存退出状态，如果是异常终止则保存着导致该进程终止的信号是哪个。

3 僵尸进程：
（1）子进程死了，但是还有死亡信息存留在内核中，如果父进程不回收子进程死亡信息，那么该子进程则是一个僵尸进程。
（2）父进程可以使用wait、waipid对子进程进行回收。







五 一个例子：
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
int main() {
        // fork之前的代码只有父进程能够执行，子进程不能执行，但是子进程可以拿到这些数据（复制），例如下面定义的i、n、pid，这些数据我们称之为公共数据
        int i;
        int n = 5;
        pid_t pid;
        // 父进程循环创建n个子进程
        for (i = 0; i < n; i++) {
                pid = fork();       // 子进程从这行代码开始执行，之后只要没有通过选择结构判断归属（pid可区分父子进程，i可区分所有进程）的代码和数据都是公共的
                if (pid == -1) {       // 这句话比较特殊，只有父进程可能为true，子进程执行该语句必是false
                        perror("Child-process fork failed");
                        exit(1);
                } else if (pid == 0) {       // 这个括号里面是子进程而不是父进程
                        break;
                }
        }
        // 父进程和所有子进程各自要执行的代码（通过i来区分所有进程）
        switch(i) {
                case 0 :
                        sleep(i);
                        printf("I am child %d, my pid is %u\n", i + 1, getpid());
                        break;
                case 1 :
                        sleep(i);
                        printf("I am child %d, my pid is %u\n", i + 1, getpid());
                        break;
                case 2 :
                        sleep(i);
                        printf("I am child %d, my pid is %u\n", i + 1, getpid());
                        break;
                case 3 :
                        sleep(i);
                        printf("I am child %d, my pid is %u\n", i + 1, getpid());
                        break;
                case 4 :
                        sleep(i);
                        printf("I am child %d, my pid is %u\n", i + 1, getpid());
                        break;
                case 5 :
                        sleep(i);
                        printf("I am parent, my pid is %u\n", getpid());
                        break;
        }
        // 父进程和所有子进程都执行的代码
        return 0;
}
