用户分为两种，一种是系统管理员，一种是程序员。
系统管理员可以使用kill命令向任意一个进程发送任意一个信号；也可以关机或者操作shell。
但是kill命令在这里不是我们研究的重点，我们现在是从开发的角度看待信号的，因而，程序员如何自定义触发事件才是问题的重点：
程序员可以使用五种函数自定义信号的触发事件：
①int kill(pid_t pid, int sig);   // 向任一进程发送某个信号
②int raise(int sig);   == int kill(getpid(), int sig);
③alarm
④setitimer
（程序员可以使用③④这两个函数进行定时操作）
⑤void abort();   // 终止本进程



根据上面，程序员可以使用kill函数向任一进程发送某个信号，但是根据三要素.png，我们知道1-31号信号是有标准触发事件的，
为了避免标准触发事件与程序员自定义触发事件发生矛盾，Linux为我们提供了一种屏蔽机制，程序员在写代码时只需要在kill之前
使用sigprocmask函数和相关的屏蔽集操作函数将要kill的信号屏蔽掉，在屏蔽期间，标准触发事件将不起作用，kill之后程序员还
可以将该信号解除屏蔽。
