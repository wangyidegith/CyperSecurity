零 概念：试想这样一个场景，线程A向某个fd里发送数据，但是数据量极大，有几百个G，那么，如果另一个线程B也想向该fd发送数据，就要等到A发完为止，但是这个数据又是必须先发过去的，此时就可以使用条件变量，让A每次循环发送数据之前去检查一下条件，如果符合条件就pthread_cond_wait等待B唤醒它，而B在发送数据时将条件置换既可以触发A的wait，然后发完数据后再调用pthread_cond_signal唤醒A。







一 条件变量
（一）初始化和销毁
1 初始化
（1）静态初始化：pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
（2）动态初始化：
pthread_cond_t cond;
pthread_cond_init(&cond, NULL);

2 销毁
pthread_cond_destroy(&cond);



（二）操作
1 下面的伪代码极其经典
pthread_mutex_lock(&mutex);
while (条件判断) {   // 之所以使用while而非if，是因为os存在虚假唤醒
    pthread_cond_wait(&cond, &mutex);
}
数据操作
pthread_cond_singal(&another_cond);   // 这是生产者-消费者模型里的一个操作，实际中也可以用broadcast，也可以没有，请视具体情况而定
pthread_mutex_unlock(&mutex);

2 两大函数
（1）pthread_cond_wait
这个函数依次做了三件事：
a 释放锁；
b 等待signal；
c 抢锁；
（2）pthread_cond_signal | pthread_cond_broadcast
a signal根据CPU调度算法随机挑一个线程发送；
b broadcast向所有线程发送。
