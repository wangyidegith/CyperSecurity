进程模型：重点要理解到的是：
	A——进程的地址空间是相互独立的，不同程序各自启动后拥有不同的进程地址空间，同一程序多次启动后也拥有不同的进程地址空间（这是进程最显著的特点）；
	B——对我们开发者来讲，进程的地址空间是虚拟的，这就是虚拟地址空间（虚拟内存）的概念，这个虚拟主要有两个体现：
		a——地址是虚拟的，即我们使用printf("a addr = %ld", &a);看到的地址不是实际的物理地址，MMU负责完成了虚拟地址与物理地址之间的映射（MMU的第一大功能）；
		b——内核空间是虚拟的，即看上去每个进程都拥有一块独立的内核空间，实际上内核空间是所有进程共用的。
	C——内核空间和用户空间不是两个进程而是一个进程，它们之间通过MMU进行模式切换（MMU的第二大功能），好处在于模式切换的效率比进程切换的效率高很多；
	D——用户模式、内核模式、用户空间、内核空间是什么？
		用户模式就是执行应用程序代码（C语言、C库函数、系统调用，作为一个Linux应用程序的开发者你能写出的最底层的代码就是使用系统API，当然你如果非要想写比这更底层的，那就是修改Linux内核源码了，不要忘了Linux是开源的），访问用户空间；
		内核模式就是执行内核代码（以sys_开头的函数即内核系统调用，相当一部分是驱动函数），访问内核空间（当然也有权限访问用户空间）。
	E——为什么要区分两种模式？你想一想如果任何一个Linux的用户都可以随意使用内核函数，那势必会影响到其他的进程，那岂不是乱套了？因而内核代码必须被保护。