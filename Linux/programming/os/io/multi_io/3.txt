三种多路复用IO的方法：
	select机制：	
		比如select机制，程序员准备一个长达1024的位图fd_set，对其FD_ZERO，将需要监听的套接字FD_SET入fd_set，将其作为传入参数传入select函数【int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);】，select函数会轮询以便位图，判断用户需要监听的套接字是否有事件，如果没有一个有事件，在timeout设置为NULL的情况下继续轮询直到有事件，一次轮询后若有套接字有事件则返回，原来的传入参数fd_set现在作为传出参数传给用户（fd_set作为一个数据结构既作为传入参数又作为传出参数，在实际编程实现时往往定义两个fd_set，allset作为传入参数负责记录用户希望监听的套接字描述符，rset作为传出参数负责记录有读事件的套接字描述符），这样，对于用户来讲，用户就一次性拿到了一个集合，集合里面存放着所有需要监听的套接字，并标明了哪个套接字有事件，这样用户通过遍历（这里往往需要先去allset中遍历一遍，找到用户监听的套接字（FD_ISSET），而后再去rset中寻找该套接字是否有事件（FD_ISSET），这里需要两个FD_ISSET，时间复杂度为O(n方)，为了降低复杂度，我们可以设置一个数组，由该数组记录allset中的套接字）该集合找到有事件的套接字进行IO即可，既然用户能拿到某个fd，那么该fd一定有事件，因而这里也就不存在阻塞的情况了，一般可以采用非阻塞的方式进行IO，
	select机制的缺陷：
		分析上述的select机制，可以看到select有这么几个缺陷：①需要用户自己准备一个用于存储要监听的套接字的数据结构，并且麻烦的是，select的中间三个参数是传入传出参数，所以用户还得准备一个用于接收有事件的套接字的数据结构；②监听集需要用户自己维护，一旦用户对监听集做了FD_SET或者FD_CLR，这个事情内核是不知道的，用户需要重新将新的监听集通过select传给内核；③对于select传出的事件集，用户拿到的是整个集合，这个集合通过置1标识了哪个套接字有事件，因而用户还需要遍历集合找到有事件的套接字。
	poll机制：
		poll对select做了些许改进：int poll(struct pollfd *fds, nfds_t nfds, int timeout);，
		struct pollfd {
    			int fd;         /* 文件描述符 */
    			short events;   /* 监控的事件 */
    			short revents;  /* 实际发生的事件 */
		};
		fds是一个传入传出参数，但是这个参数并不像readfds一样，而是使用一个结构体实现了监听集和事件集的分离，如此看来，poll仅仅是对上述缺陷的①做了部分改进，使得程序写起来没有那么麻烦而已，除此以外，poll的数据结构比select仅仅缩小了一点，在③上并没有节约多少计算资源，因而其本质和select没有任何差别。
	epoll机制（对照select机制的三点缺陷）：
		epoll虽然只比poll多了一个字母，但是却对select和poll做了本质上的改进：
		①epoll机制将准备用于存储要监听的套接字的数据结构的事情交给内核去做，用户epoll_create后，用户拿到了一个句柄，通过此句柄用户可以让内核帮助自己管理一颗红黑树；
		②用户可以通过
			int epoll_ctl(int epfd   // 句柄, int op   // EPOLL_CTL_ADD EPOLL_CTL_MOD EPOLL_CTL_DEL, int fd   // 套接字描述符, struct epoll_event *event   // 红黑树节点);
			对红黑树上的节点做增删改操作而无需重新建立一颗树；
			struct epoll_event {
    				__uint32_t events;  /* Epoll events */
    				epoll_data_t data;  /* User data variable */
			};
			typedef union epoll_data {
    				void *ptr;
    				int fd;
    				__uint32_t u32;
    				__uint64_t u64;
			} epoll_data_t;
		③epoll_wait（相当于select机制和poll机制中的select函数和poll函数）在返回时，只返回有事件的套接字，准确的说，
			int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
			events是一个传出数组，里面存放了所有有事件的节点。
		epoll机制存在几个难以理解的问题：
			①为什么在ADD epoll_event的时候可以共用一个epoll_event而不需要为每一个节点创建一个epoll_event？
			②epoll_event的第一个参数存在一个水平触发边沿触发以及ONESHOT的问题，现在姑且认为水平触发适用于小数据，边沿触发适用于大数据，ONESHOT可以用来解决多线程争用同一套接字接收缓冲区的同步问题。
			③可读和要读是一个概念，但是可写和要写并不是一个事，当epoll监听到某个套接字的发送缓冲区有空闲时，此时程序并不一定要写啊，二者如何协调是一个问题。
