一 poll函数
0 函数原型：int poll(struct pollfd* fds, nfds_t nfds, int timeout);

1 返回值：成功返回“有事件的fd数量”，失败返回-1。

2 参数：
（1）全部客户端数据结构
struct pollfd {   // 单个客户端数据结构
    int fd;   // 文件描述符
    short events;   // 对该fd要监控的事件：POLLIN、POLLOUT，这里可以位或，因而不一定是一个事件，可以这样：POLLIN | POLLOUT
    short revents;   // 实际发生的事件
};
（2）nfds：要监听的fd数量 == fds数组的长度。
（3）timeout：
a 0表示阻塞，直到有事件才返回有事件的fd数量，出错就返回-1；
b >0表示监听多长时间，有事件返回有时间的fd的数量，没事件时间一到也返回0，出错就返回-1。






二 poll对select的三点缺点做了些许改进
1 描述符的个数无限制。

2 需要自行设计全部数据结构但是提供了一个pollfd结构作为单个数据结构（这个数据结构其实让用户自行设计更好）。

3 监听集和事件集分离，但这个分离也不是很好，你还得自行判断谁有事件谁没事件，最好能直接给出用户一个有事件的结构。
