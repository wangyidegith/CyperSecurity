RDT机制（TCP之所以可以实现可靠数据传输，是因为其面向连接，UDP由于不面向连接，并不具备RDT机制，需要程序员自行检错）：
	计算机网络中解决RDT问题的整体思路：
		可靠数据传输（RDT）是计算机网络中的一个基本问题，它很大程度上决定了计算机网络的分层体系结构：
		在分层模型中，物理层和IP层由于先天因素导致其传输是“尽力而为”的，尽力而为的意思是“我尽力正确传输数据，但是如果中间出了什么差错，这不怨我”，因而我们需要在物理层和IP层的上一层提供可靠数据传输服务以保证可靠（计算机网络中的可靠性不是一个概率值而是100%），
		在计算机网络的分层架构中，数据链路层和传输层负责了RDT工作，数据链路层负责解决物理层的比特级错误，传输层的TCP用来解决IP层的字节级错误，当然如果使用udp协议开发应用程序，那么你需要在应用层解决RDT。

	计算机网络中解决RDT问题的具体思路：检错（奇偶校验 校验和 CRC）重传，下面着重解释重传的问题：
		关于重传机制，现代计算机网络一般采用自动请求重传，即在发送方开启一个【定时器】，一般将该定时器设置为“略大于从发送方到接收方的平均往返时间”（可以采用其他更有效的算法），一旦超时发送方将默认发送分组或者确认分组丢失（如果接收方发现数据包有错误是不用告诉发送方的，只需等待发送方超时重传即可），此时将自动重传丢失分组，由于网络环境的不确定性，为了避免重复发送，将发送包和确认包【编号】。
		总结上段话：自动请求重传 == 定时器 + 序号
	计算机网络的发展历史上出现过以下几种自动请求重传协议：
		停等协议：没有充分利用信道带宽；
		流水线协议：允许一次超时时间内多次发送分组；
		回退N步协议（滑动窗口协议）：
			改进点：该协议在流水线的基础上增加了发送方的滑动窗口机制，这样可使得发送方可以有效地控制发送分组的数量以避免网络拥塞。
			窗口：发送方设置了一个字段，该字段是多大即表明该发送方的序号范围即发送窗口的大小（字段大小 == 序号范围 == 窗口长度），比如现在该协议的设计者定义字段为2B，则序号范围是[0, 3]，窗口长度是4。
			工作原理：比如现在程序要发送10B数据，窗口大小是4，那么一次发送4B数据，接收方采用累计确认机制来答复发送方，收到了第几个数据就答复几，
			 	 比如现在接收方收到了0、1、3，很明显2号包丢了，那么接收方就丢弃2号包会面的所有包，回复1意即告诉发送方1以及他之前的数据没问题，接收方在收到ACK1时重传1后面的所有数据包，这便是”回退N步“的概念，
			 	 由于此时发送方得知0和1已经被成功接收了，发送方就将窗口移动两个单位，这便是”滑动“的概念。
			缺点：如果协议需要传输的数据很长，但是错误仅仅出在开头的某个字节上，那么重传后面的大量数据显得很浪费资源。
		选择重传协议：
			改进点：为了改进滑动窗口协议的问题，选择重传协议诞生了。——选择重传协议不光设置了发送窗口，也设置了接收窗口，接收方不会丢弃出错字节后面的数据而是将其缓存，发送方不会发送出错字节后面的数据，而是谁出错发谁。
			？选择重传协议存在一个”无法区分新旧分组“的问题（实际上回退N步也存在这个问题，回退N步就是接收窗口为1 的选择重传），关于该问题，目前还不解。
	两个引申问题：
	流量控制：TCP发送方针对接收方进行控制：
		三次握手阶段，连接双方便会开始协调接收窗口的大小：
		TCP报文段的接口窗口（RWin）字段用来告诉对端自己现在能够接收多少数据（TCP接收缓冲区的空闲空间大小），RWin值根据TCP接收缓冲区的最后一个被读取自己的编号和最后一个被存入字节的编号决定（把接收缓冲区想成一个队列就理解了），RWIN值必须小于等于二者差值，发送方根据RWin值来确定发送数量。
	拥塞控制：TCP发送方针对网络层进行控制。