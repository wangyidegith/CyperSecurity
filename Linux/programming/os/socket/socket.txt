零 网络编程（socket编程，协议编程）的概念：网络编程就是在写协议，我们要从四大概念理解网络编程（协议、实体、服务、服务访问点）。
（零）协议：网络编程最核心概念
0 协议 == 程序 == 算法+数据结构
这种程序也叫网络程序、socket程序、协议程序，我们就统一叫socket程序了。

1 数据结构 == 协议语法 == 协议包（协议数据单元或者服务数据单元）的格式 == 一个带着柔性数组的结构体（不同语言可以使用XML、JSON等格式） == 序列化后的字节流（io函数的void* buf参数）
注：这里涉及一个概念：序列化和反序列化，序列化 == 格式（类、结构、XML、JSON等） -> 字节流，反序列化 == 字节流 -> 格式，这个地方是可以产生漏洞的。

2 算法 == 协议的语义和同步（时序）

3 语义 == 程序的算法本身

4 同步也是指算法但是指对等方如何共同协作的算法

5 理解予以和同步的区别：比如client发了请求数据，server收到后，根据数据的情况决定响应什么数据，这是语义，这里client先发数据而后server再进行回应这就是时序。



（一）实体就是socket程序中的进程，网络之所以叫网络，就是因为进程不是在一台机器上的，不同机器上的进程要通信，这些进程叫对等实体。



（二）服务
0 概念：是从上下而非对等的角度看待协议，一般看协议会从对等（拓扑）的角度看待协议，但我们是开发者，我们要用某种编程语言去写协议的，因而我们更要从上下的角度看待协议。

1 分层：计算机网络模型是一个分层结构（这是工程设计的优化考量的结果），Internet的五层模型、七层模型、TCP/IP模型都是分层结构。

2 协议程序的数据流程（网络编程的本质）
（1）上到下：
a 协议从上层接收数据：协议程序它要提供io接口的（一个协议程序表现为一个.h文件，里面是io接口、预处理、类和结构），上层程序调用output接口把数据给协议程序；
b 在本层封装成本层的协议包；
c 通过socket把本层协议包交给下层。
（2）下到上：
a 协议程序通过socket从下层拿到本层的协议包；
b 解封后拿到数据。
c 上层程序调用input接口拿到数据。



（三）服务访问点：
0 说白了就是接口函数，在一个协议程序中，至少存在你的协议程序和socket交互的访问点，如果你还提供了向上接口，那么这也是访问点。

1 在复杂的协议编程中还有一个粘合剂的概念，它表现为服务访问点的参数，比如socket函数的三个参数，表示用户想用什么服务。







一 socket函数
（零）函数原型：int socket(int domain, int type, int protocol);



（一）返回值：其可以返回一个描述符作为我们与内核协议栈中的某个协议交互的句柄。
1 套接字描述符和普通的文件描述符表面上看没有区别，那么如何区分它们呢？——
stat结构及fstat函数；
虽然程序员从表面上区分不了fd，但是每一个fd的状态是不一样的；
而在stat结构内部，st_mode成员（下述结构中的第三个）可以用于区分不同类型的fd。
`
struct stat {
    dev_t         st_dev;      /* 文件的设备 ID */
    ino_t         st_ino;      /* inode 编号 */
    mode_t        st_mode;     /* 文件类型S_IFMT（其中套接字类型为：S_IFSOCK）和访问权限 */
    nlink_t       st_nlink;    /* 链接数 */
    uid_t         st_uid;      /* 文件的用户 ID */
    gid_t         st_gid;      /* 文件的组 ID */
    dev_t         st_rdev;     /* 设备的 ID */
    off_t         st_size;     /* 文件的大小（字节数） */
    blksize_t     st_blksize;  /* 文件系统 I/O 缓冲区的大小 */
    blkcnt_t      st_blocks;   /* 文件系统中分配的块数 */
    struct timespec st_atim;   /* 文件最后一次访问的时间 */
    struct timespec st_mtim;   /* 文件的最后一次修改时间 */
    struct timespec st_ctim;   /* 文件的最后一次状态改变时间 */
};
`
套接字描述符判定函数：
int isSocketType(int fd) {
	struct stat st;
	if (fstat(fd, &st)) {
		perror("fstat failed");
		return -1;
	}
	if ((st.st_mode & S_IFMT) == S_IFSOCK) {
		return 0;
	} else {
		return 1;
	}
}



（三）参数
1 domain：告诉内核用户希望使用的网络协议栈或者说协议族。
我想这个参数的设置是socket函数的设计者考虑到了会有多种协议栈的情况，在历史上确实有10种协议栈，但是经过计算机网络的发展，很多都被淘汰了，在Linux开发中也就5种协议栈(PF_XXXX或者AF_XXXX，这两个值没有明显区别)：
（1）AF_UNIX(AF_LOCAL)：用于进程间通信
（2）AF_INET：TCP/IP协议栈的v4版本，也是现在最常用的版本
（3）AF_INET6：TCP/IP协议栈的v6版本，未来的版本
（4）AF_NETLINK：与内核相关
（5）AF_PACKET：底层（数据链路层或者说驱动层）协议族

2 第二个参数type：告诉内核用户希望使用的协议类型。
TCP/IP协议栈（AF_INET）有5种协议类型：
（1）SOCK_STREAM
（2）SOCK_DGRAM
（3）SOCK_RDM
（4）SOCK_SEQPACKET
（5）SOCK_RAW
其中，前四个是标准套接字，它们都使用了TCP、UDP、SCTP，SOCK_RAW是原始套接字。
AF_PACKET有一种协议类型：SOCK_PACKET。

3 第三个参数protocol：
（0）注意：该值是粘合剂，会和收发的数据包中的协议号（详见IP包格式）做比对，须是同一协议号才能收发成功，作为在网络上传输的数据包，其协议号字段必是网络字节序。
（1）协议列表
a TCP/IP协议栈：
SOCK_STREAM类型：
    IPPROTO_TCP（填0即默认为6）：6
SOCK_DGRAM：
    IPPROTO_UDP（填0即默认为17）：17
SOCK_SEQPACKET：
    IPPROTO_SCTP（填0即默认为132）：132
SOCK_RDM：
    IPPROTO_UDP：6
    IPPROTO_SCTP：17
SOCK_RAW：（协议号的取值范围是0~255，因而不需要进行字节序转换）
    IPPROTO_RAW：255
    IPPROTO_IP：0
    IPPROTO_TCP：6
    IPPROTO_UDP：17
    IPPROTO_ICMP：1
    IPPROTO_IGMP ：2   // 用于发送和接收IGMP协议的数据包，用于组播。
SOCK_PACKET（被AF_PACKET代替）：直接从网卡驱动收发包。
b AF_PACKET：
SOCK_PACKET类型：
    ETH_P_ALL - 接收或发送所有协议类型的数据包。
    ETH_P_IP - 接收或发送IPv4数据包。
    ETH_P_ARP - 接收或发送地址解析协议（ARP）数据包。
    ETH_P_RARP - 接收或发送反向地址解析协议（RARP）数据包。
    ETH_P_IPV6 - 接收或发送IPv6数据包。
    ETH_P_802_3 - 接收或发送IEEE 802.3帧。
    ETH_P_802_2 - 接收或发送IEEE 802.2逻辑链路控制（LLC）帧。







二 对socket函数的深入理解：三级缓冲区结构
（一）三级缓冲区结构：协议 <-> socket <-> 基于的协议。



（二）具体分析会发现，一个socket == 一个收发缓冲区：
1 首先，
你read(socketfd, buf, length);或者write(socketfd, buf, length);时，你read的数据是从哪来的？write的数据又到了哪去？
你不要说是从下层协议来的到了上层协议那去那是废话，
具体而言，read的数据是从socket中的接收缓冲区复制到buf的，write的数据是从buf复制到socket中的发送缓冲区去的。

2 其次，关于收发缓冲区，这就要涉及对于TCP和UDP的理解了，面向连接和无连接的本质区别正是三个缓冲区的多少和结构的问题（请见《计算机网络》文档）。







三 标准套接字
（一）TCP和UDP：在计算机网络文档的传输层（三个部分：端口号、TCPUDP辨析、代理技术）中我们详细讲明了这两个协议，其中TCPUDP辨析部分是理解这两个协议的关键，总结来看：
1 TCP是面向连接的，UDP是无连接的（缓冲区的多少和数据问题）
（1）多少问题：
TCP一对一：TCP的缓冲区是与一个四元组（local-ip, local-port, remote-ip, remote-port）相对应的，在服务端每个客户端都有一个fd（对应一个sockaddr，对应一个socket缓冲区）；
UDP一对多、多对一、多对多：UDP的缓冲区是与一个二元组（local-ip, local-port）相对应的，在服务端一个fd可接收任何客户端的发送，也可以向任何客户端发送。
（2）数据问题：
TCP里的一个缓冲区里的数据只能是一个客户端的，甚至TCP的协议格式都只能是一个协议（当然可以在一个协议里封装其他协议，通过层层嵌套的方式实现多协议，但是这不是并行的本质上还是一个流，sctp实现了多流）；
UDP的一个缓冲区里的数据可以是多个客户端的。

2 TCP可靠（不会乱序、不会出错、不会丢包），UDP不可靠

3 缓冲区的结构和大小。



（二）SCTP：
0 感悟：
（1）学习其他协议恰恰有助于学习已经学了的协议，实际上我真正理解tcp的面向连接（缓冲区的多少和数据）、可靠性和缓冲区结构大小正是靠写udp才明白的。

（2）那么，学习stcp，我们又能对tcp和udp理解到什么呢？这就是下面的内容。



1 sctp
（1）基于ip协议。

（2）多流：tcp的名字叫传输控制协议，sctp叫流控制协议，tcp没有考虑多流（多协议包：指一条连接可以传输多种类型的协议包（包里封包这种不算），这一点是tcp做不到的）的情况，而stcp的最大特点正是可以多流。

（3）多宿主。


		




四 原始套接字
（零）
SOCK_RAW：（协议号的取值范围是0~255，因而不需要进行字节序转换）
    IPPROTO_RAW：255
    IPPROTO_IP：0
    IPPROTO_TCP：6
    IPPROTO_UDP：17
    IPPROTO_ICMP：1
    IPPROTO_IGMP ：2   // 用于发送和接收IGMP协议的数据包，用于组播。



（一）IPPROTO_RAW和IPPROTO_IP的区别：二者都是接收所有ip包，但是raw由程序员管理ip协议头，ip会被协议栈自行赋予ip协议体。



（二）ICMP、TCP、UDP：接收特定协议包。



（三）用户自定义协议：你可以自定义一个协议号，原理和IPPROTO_RAW一样。
		






五 链路套接字
（一）基于网卡驱动。



（二）
SOCK_PACKET类型：
    ETH_P_ALL - 接收或发送所有协议类型的数据包。
    ETH_P_IP - 接收或发送IPv4数据包。
    ETH_P_ARP - 接收或发送地址解析协议（ARP）数据包。
    ETH_P_RARP - 接收或发送反向地址解析协议（RARP）数据包。
    ETH_P_IPV6 - 接收或发送IPv6数据包。
    ETH_P_802_3 - 接收或发送IEEE 802.3帧。
    ETH_P_802_2 - 接收或发送IEEE 802.2逻辑链路控制（LLC）帧。


（三）一个重要结构（该结构用于存储网卡信息，使用ioctl函数操作）
struct ifreq {
    char ifr_name[IFNAMSIZ]; /* 接口名称 */
    union {
        struct sockaddr ifr_addr; /* 接口地址 */
        struct sockaddr ifr_dstaddr; /* 目标地址 */
        struct sockaddr ifr_broadaddr; /* 广播地址 */
        struct sockaddr ifr_netmask; /* 掩码地址 */
        struct sockaddr ifr_hwaddr; /* 硬件地址 */
        short ifr_flags; 
	/* 
	接口标志 【重要成员】：和epoll_event的第一个成员一个道理，采用如下流程设置该值：
		①获得标志位；
		②目标标志位 = 取出的标志位 | 要设置的标志位；
		③设置目标标志位；
	*/
        int ifr_ifindex; /* 接口索引 */
        int ifr_metric; /* 路由度量值 */
        int ifr_mtu; /* 最大传输单元 */
        struct ifmap ifr_map; /* 内存映射信息，该结构详见《Linux网络编程》的363页，该结构与驱动开发有关*/
        char ifr_slave[IFNAMSIZ]; /* 从接口名称 */
        char ifr_newname[IFNAMSIZ]; /* 新接口名称 */
        struct if_settings ifru_settings; /* 设备协议配置，不懂这个 */
        char *ifr_data; /* 接口数据，用户自行定义，一般用来传递标志 */
    } ifr_ifru;
};



（四）以太网帧结构
1 以太网帧结构：目标MAC（6）	源MAC（6）	类型号（2）	              数据载荷（46-1500）	      CRC（4）

2 CRC有硬件计算由驱动负责填写和剥离，用户无需管这个字段。

3 类型号是以太网的粘合剂，如同IP协议的协议号和传输层的端口号一样，下面是几种常见的类型号：
ETH_P_IP：0X0800
ETH_P_IPV6：0X86DD
ETH_P_ARP：0X0806
ETH_P_8021Q：0X8100

4 除了上面介绍的两个字段，下面将着重分析以太帧的长度问题：
在<netinet/if_ether.h>中定义了如下常见宏：
#define   ETH_ALEN   6	// MAC地址的长度
#define   ETH_DATA_LEN   1500	// 以太帧有效载荷的最大长度
#define   ETH_HLEN   14	// 以太帧的头部长度
#define   ETH_ZLEN   60	// 不含CRC的以太帧最小长度							
#define   ETH_FRAME_LEN   1514	// 不含CRC的以太帧最大长度
