一 情报搜集
（零）nmap探测目标主机的原理及基本操作：
1 其实不管是主机发现还是端口探测，本质上都是利用网络协议，就拿最典型的ARP协议举例，nmap向目标主机发送一个ARP请求包，但是目标主机还以为是广播过来的根本发现不了这其实是一个构造包，所以一旦回了响应包，nmap就知道这个主机是活跃的，没有回应那说明主机不活跃，对于端口探测，在有回应的状态下，nmap会继续分析回应的是什么包以确定端口是否开放；
2 其实不管你指定的协议是什么，nmap都会首先检查这个目标IP地址是不是同一网段的，如果是，那么直接发ARP包，如果不是，再按照你指定的协议发包。
3 使用--packet-trace显示探测过程的通信细节。
4 nmap探测目标一般写成IP地址，也可以是域名。
5 -v：verbose
6 -D：decoy
原理：nmap并不是通过在单个 IP 数据包头部塞入伪装地址来实现 -D 选项的功能（这不是dos攻击，是需要收到响应的），而是一次探测发送多个探测包，其中只有一个含有真实IP地址，从而达到隐藏真实 IP 的目的。
7 最基本命令（四大功能）：
（1）端口扫描：
nmap <ip-addr or domain-name> == sudo nmap -sS <ip-addr or domain-name>
sudo nmap -sU <ip-addr or domain-name>
（2）存活探测：-sn
（3）版本探测：-sV
在服务类型探测上比-sS好
（4）os探测：-O
（5）旁站C段扫描：nmap -p 80,443,8000,8080 -Pn 101.29.7.0/24







（一） 活跃（联网）主机发现
1 最基本的：nmap -sn <ip addr>
（1）ip addr的形式可以是：
a 单个：192.168.43.223
b 多个：192.168.43.223 192.168.43.171
c 范围：
（a）192.168.43.1-255
（b）或子网形式：192.168.43.0/24
（2）s指扫描scan；
（3）n指不进行DNS反向解析，只进行活跃主机发现；
（4）nmap必须是小写；

2 关于DNS的：
（1）nmap -n <ip addr>
n指不进行DNS反向解析。
所以如果，nmap -sn <ip addr>，n既说明不进行DNS反向解析又说明不进行端口探测。
（2）nmap -sR <ip addr>
R指必须进行DNS解析。
（3）指定DNS服务器：
nmap --dns-servers <dns-server1,dns-server2,etc> <ip addr>

3 特殊目标：
（1）在探测时排除指定的目标：nmap -sn <ip addr> --exclude <ip addr> 
（2）对一个文本文件中的地址列表进行探测：nmap -sn -iL <file include ip addr>
应用场景：需要经常探测某些IP段。
（3）nmap会随机对Internet上的num个目标进行探测：nmap -iR <num>
应用场景：有些黑客会以此作为娱乐，发现哪台机子就打哪台。

4 指定协议进行活跃主机发现：
（1）ARP: namp -sn -PR <ip addr>
优点：准确度最高；
缺点：不能跨网络。
（2）ICMP：
a ping：nmap -sn -PE <ip addr>
b 时间戳请求和应答（这个本来是用于时钟同步和时间测量的）：nmap -sn -PP <ip addr>
c 地址掩码请求与应答：nmap -sn -PM <ip addr>
优点：可以跨网络；
缺点：准确度没有ARP高，因为很多服务器为了防御这种探测，会禁ping，禁请求。
（3）
TCP SYN：nmap -sn -PS <ip addr>
原理：向目标的某个端口发送SYN，如果得到回应，不管是SYN/ACK还是RST，都说明目标是活跃的，无回应则说明目标不活跃，如果得到了回应，那么nmap就发个RST过去而不真正建立连接。
优点：准确度仅次于ARP且能跨网络；
缺点：容易被发现并溯源。
TCP ACK：nmap -sn -PA <ip addr>
原理：同上，只是发的是ACK，得到回应即说明目标活跃，无回应则说明目标不活跃。
优点：能跨网络；
缺点：除了容易被发现被溯源以外，它的准确度并不高，因为在实际情况中，目标主机一般会过滤掉莫名其妙的TCP/ACK包。
（4）UDP：nmap -sn -PU <ip addr>
原理：当一个UDP端口收到UDP数据报后，如果目标主机不活跃，则无回应，活跃也不一定有回应，两个原因，一是因为包可以会丢，事实上除了TCP以外都存在这个问题，UDP尤为明显，二是UDP端口一般会忽略这个包而不响应任何包，所以这个方法很扯淡。



（二）端口探测（nmap认为的端口状态有open，closed，filterd，filterd就是不确定端口是否开放，指探测包没有到达目标主机，因而不确定端口是否开放，之所以叫filterd是因为nmap猜测探测包没有到达目标主机的原因是被防火墙过滤掉了）
1 SYN探测：nmap -sS <ip addr>
原理：向目标的某个端口发送SYN，如果得到的回应是SYN/ACK，说明端口开着，如果不是，说明端口关闭，如果主机活跃但是端口关闭，那么对端会回一个RST的，如果得到了回应，那么nmap就发个RST过去而不真正建立连接。
优点：（1）准确度高；（2）隐蔽性好；（3）执行速度快。因为第二次握手后断开这属于TCP的正常情况。优点很多，因此该方式是最流行的端口探测方式，也是nmap默认的方式。
缺点：也许缺点就是需要root权限吧。

2 connect探测：nmap -sT <ip addr>
原理：建立完整的连接。
优点：（1）不需要root权限；（2）可靠；（3）隐蔽性好；
缺点：慢。

3 UDP探测：nmap -sU <ip addr>
原理：如果有回应，那肯定说明端口开着，但是问题是如果没有回应，也不代表端口就关着，因为包可能丢了，此时端口状态（ICMP主机不可达，类型为3）是：open|filtered，具体而言如果nmap知道是ICMP端口不可达（代码为3），则判定端口状态closed，但是如果是ICMP其他不可达（代码为1，2，9，10，13），则端口状态是filterd，标识nmap猜测包被防火墙过滤掉了。
优点：也许优点就是适用于UDP吧；
缺点：（1）相当慢；（2）隐蔽性不好。

4 TCP的其他探测方式（这些方式都不太靠谱，因为很容易被fw拦）：
（1）FIN：nmap -sF <ip addr>
（2）NULL：nmap -sN <ip addr>
（3）Xmas Tree（FIN、URG、PUSH）：nmap -sX <ip addr>

5 idle探测，一种比SYN探测还要隐蔽的方式：
（1）探测的隐蔽性在于不要让目标发现有个IP在探测自己，ARP探测、SYN探测、connect探测这些方式既准确又隐蔽性高，是因为这是很常见的包，目标主机收到一个ARP响应包，它怎么知道这是有意构造的呢？因而ARP在防溯源方面是无解的，SYN和connect都是正常的握手过程，服务器一般不会怀疑，除非服务器为了防御这种探测而有意不使用web服务，但是其它的莫名其妙包一方面准确度低容易被防火墙拦另一方面可能被记录继而被溯源。
（2）idle探测：
a 检测第三方主机的IP ID值记录下来；
b 在本机上伪造一个源地址为第三方主机的包，发送给目标；
c 检查第三方主机的IP ID值，比较，如果发生了改变，则说明探测端口开放，如果没有，则说明没有开放。
原理：巧妙利用IP ID值的变化。
优点：隐蔽；可以绕开一些安全限制。
缺点：很难实施，因为要保证第三方主机尽量处于空闲状态；耗费时间长；有的ISP不允许发送伪造IP。总之我感觉这个方法很扯淡。

6 探测时指定端口：
（1）nmap最常见的1000个端口；
（2）探测常见的100个端口：nmap -F <ip addr>
（3）优先探测最常用的端口（没有指定number，默认为10）：nmap --top-ports [number] <ip addr>
（4）探测所有端口：nmap -p- <ip addr>
（5）指定探测某个端口：nmap -p <port> <ip addr>
（6）指定探测某个应用层协议：eg：nmap -p http,ssh <ip addr>
（7）由于TCP和UDP不共用端口，所以使用U说明这是UDP端口，使用T说明这是TCP端口：eg：nmap -sU -sT -p U:53 T:22 <ip addr>
（8）探测范围内的端口：eg：nmap -p 9000-11000 <ip addr>
（9）--open：只显示开着的端口（默认还有filtered）。







二 情报侦察（nmap一般被用来进行二进制层面的漏洞检测，密码审计其实用hydra更好）
（一）OS与服务版本检测
1 OS探测：
nmap -O <ip addr>

2 服务版本检测：
nmap -sV <ip addr>



（二）NSE（漏扫）
0 nmap --script-help default
查询默认脚本，能归属默认脚本的必须是不破坏目标主机的脚本，因而请放心使用。

1 nmap -sC <ip-addr>
扫完目标后，运行default的全部脚本。

2 nmap --script=nfs-ls <ip-addr>
单独运行nsf-ls脚本。
