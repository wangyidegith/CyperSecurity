零 概念：详见《计算机网络》传输层-代理部分。







一 整体思路
（零）工具（总的来说：生成自带socks5代理客户端的payload；payload的pivot、portfwd）：
0 emp

1 msf：详见《msf-post》隧道部分。

2 cs



（一）反向代理
0 ssh -R：使用全端口转发而非动态，其好处在于：
（1）避免去配置proxychains，攻击者应尽量减少在目标机上的操作；
（2）cc的ip和port不会在被控端有任何暴露，如果使用动态，cc的ip和端口会被包含在socks5的头部，ssh的socks5应该没用ss，所以动态简直和不用没多大区别，防一不防二啊（请见溯源文章中谈到的两个思路）。

1 cdn
（1）首先你得有一个cdn服务：在《防溯源》里详细介绍了cdn及cdn的配置。
（2）配置payload：lhost和lport是源站的域名和端口，注意一般cdn服务提供商只支持80和443端口因而载荷得相应的选成http或者https。
（3）配置监听器：相当于cdn的源站。ip就配置成0.0.0.0，端口根据载荷进行选择。

2 nginx
server {
    listen <80>;  # 监听80端口
    server_name <emp.wywywy.fun>;  # 替换为你的域名或IP地址

    location / {
        proxy_pass <http://www.wywywy.fun:80>;  # 后端服务地址
        proxy_http_version 1.1;  # 使用HTTP/1.1版本
        proxy_set_header Upgrade $http_upgrade;  # 支持WebSocket
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;  # 保留主机头
        proxy_cache_bypass $http_upgrade;  # 跳过缓存
    }
}

注意：经测试，走cdn、走cdn + nginx，没有问题，但是走cdn + nginx + cdn，不通，错误原因为：
2024/10/01 21:15:10 [error] 1115#1115: *50 connect() to [240e:e9:d804:0:3::7f8]:80 failed (101: Unknown error) while connecting to upstream, client: 101.132.57.166, server: emp.wywywy.fun, request: "GET /r6SOQf9cpgHHX8ZeoaQbIgGMr3dq6Wai7IBr5F8xbnaI4cIwbTcrPiEx732K3FJ-NabqHSEPCexwsui7pixTy48MkKDTUKUQyz2QZXGqBk6j HTTP/1.1", upstream: "http://[240e:e9:d804:0:3::7f8]:80/r6SOQf9cpgHHX8ZeoaQbIgGMr3dq6Wai7IBr5F8xbnaI4cIwbTcrPiEx732K3FJ-NabqHSEPCexwsui7pixTy48MkKDTUKUQyz2QZXGqBk6j", host: "emp.wywywy.fun"
原因猜测：正常情况下，payload可以用cdn、浏览器也可以用cdn，但是nginx却不能用，所以我觉得应该是cdn需要的HTTP请求信息和nginx构建的不匹配也可能是不允许nginx使用（可能性很小），要想解决，应该还是得去改nginx的配置文件。

3 tor
想要使用tor，
（1）你得在cc侧配置tor的反向代理服务，这个好说，跟配置nginx没啥区别；
（2）
你得在target主机上配置一个tor的代理客户端或许写到payload里（道理和socks5一样，你能配置proxychains也能自带；如果非要自带，其实也不用真的去写，由现成的elf和exe，你去集成一下就行）。
你得在target主机上配置一个socks代理客户端或自带（这个肯定一般自带了，但是在msf和cs的各个payload里，目前我没有找到一个能走socks5的payload（仅找到了windows/metepreter/reverse_http可以设置http代理但是socks测试不通过，使用4a也不行，cs同），但是tor又必须找socks5，难搞）



（二）正向代理
0 ssh -L
（1）测试结果：有一个奇异现象（ssh -R同），payload走代理回连后，如果代理死掉，payload会直接连回去。
（2）对测试结果的思考：msf的payload应该是这么写的：先通过代理回连后，会检测cc的ip和端口并记录，一旦发现断网则使用cc的ip和端口回连。
