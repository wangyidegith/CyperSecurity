——基本问题——
进攻者要防溯源，防守者要溯源；
backdoor走了代理该怎么溯源呢？
TOR协议是一个经典的防溯源协议（还有I2P），主要功能是防溯源（匿名工具）和自由上网（科学上网，实际上是为了安全性，但是正好可以绕过GFW）。



——防溯源的原理——
其防溯源原理是（三件事）：
第一，在通信之前，TOR代理客户端向TOR网络申请三个relay节点并协商好链路信息（就如同TCP数据通信前进行三次握手一样，注意：TOR代理客户端只要安装了就会自动去下载TOR网络（我们称网络中的节点为relay节点）的节点列表和各节点的公钥，因而这个所谓的申请和协商的过程是TOR代理客户端随机选择了三个relay节点包括guard节点（就是经常说的网桥）、middle节点、exit节点；
第二，然后TOR代理客户端先建立和guard节点之间的链路，然后由guard去找middle，middle去找exit，然后链路就建立了，这个链路中的三个节点都是随机选的），通信时在客户端进行三层加密数据的内容除了payload以外肯定还有目的地址信息，然后走三个节点，每个节点解密一层，最外层是guard层，由guard节点解密，中间是middle层，由middle节点解密，最里面是exit层，由exit节点解密，然后发给目标服务器；
第三，如果目标服务器是非暗网节点，则响应反着走三个节点就行，如果是暗网服务，那么这里就存在问题：暗网服务也是要实现匿名性的，那么代理客户端如何找到一个TOR站点（.onion）呢？（后面我们会在TOR工作过程中讲到）
通过以上表述，我们可以看出TOR匿名网络结构的三个关键组成：
目录服务器（存储TOR网络的节点列表及公钥等信息）；
代理客户端（负责下载节点信息、随机选择节点、和网桥建立路径、给用户数据加密三层）；
relay节点（解密和转发，分为了三类，这里涉及一个道理“至少三个节点是可以防溯源的”，guard节点就是网桥很多都在欧美地区且是稳定的大带宽主机，出口节点是根据协议转发的，比如某个出口节点只负责HTTP的转发）。



——TOR的用户值得信任吗？——
关于TOR的用户是否能被信任的问题：TOR发展起初，当Tor客户端启动时，它需要获取所有可用的节点列表及相关信息，这个包含所有guard中继器的列表并不是一个秘密，虽然公开TOR网络节点列表是必要的，但这也成为了一个问题。
为了证明这个问题的威胁性,让我们来扮演攻击者的角色,问自己:一个Oppressive Government(OG)会怎么做?通过思考真正的OG会做什么,我们就能明白为什么Tor会以这种方式构建。
真正的OD会怎么做?因为审查制度是一件相当麻烦的事情,而Tor最擅长的就是绕过它,所以OG通常会阻止用户使用Tor。有两种方法可以阻止Tor的使用: 
阻止用户从Tor中出来：对于非.onion站点而言，这是可能发生的，站点所有者需要下载Tor的exit节点的列表，并阻塞这些节点的所有流量。但是这个事情不要紧，因为很多站点并不愿意这么做（除非OG强迫），比如在Facebook的用户中使用TOR甚至非常流行，而且对于.onion站点，用户必须使用TOR协议才能访问这些站点，因而情况还不算糟糕。
阻止用户进入Tor：这是一种非常糟糕的情况，上面说了，guard节点列表是可以被下载的，那么，OG完全可以在GFW检查并禁止用户访问这些节点（尤其是这些节点还几乎都在欧美）。
为了应对这一情况，TOR协议维护了一个总不公开的guard列表并且只下行给客户端一小部分guard节点列表。



——如何实现防溯源？（TOR的工作过程）——
TOR站点会作为一个TOR代理客户端主动连接TOR网络上的某个中继节点（称为接入点，说到这里你应该已经明白为什么TOR网站在NAT内也能提供服务了吧，对了，使用反向代理，但是实际上接入点还不是反向代理服务器，但是道理就是这个道理了，后面会说到谁是反向代理服务器），要注意TOR站点和接入点之间也是走了三层加密才通的，TOR站点会将接入点信息和自己的公钥打包为描述符并生成一个十六位的字符串（这个字符串就是.onion域名）发给目录服务器（所以目录服务器算是充当了TOR网络的DNS服务器）；
TOR代理客户端要访问一个.onion时，会先做两件事：一是向目录服务器请求获得该站点的描述符，二是建立三层加密路径，其中出口节点就是临时会话点（它就是反向代理服务器了）。这两件事做好后，代理客户端就向描述符中提供的接入点信息发送会话密钥和临时会话点信息，接入点把这个信息告诉TOR站点，TOR站点终于知道自己的反向代理服务器是谁了，于是向临时会话点发起三层加密连接，连接成功建立后，临时会话点通知代理客户端，然后就可以愉快的通信了。



——如何配置并使用TOR代理客户端——
在Windows上你可以下载安装一个TOR浏览器然后使用TOR浏览器访问任意网站；
在Linux上的配置和ss-local差不多，
第一步：你需要下载并安装TOR代理程序；（建议手动安装而非使用universe，在配置emp的TOR防溯源中，我发现apt的tor代理客户端不能使用，而且TOR官方也不建议使用universe的TOR，手动安装的教程详见https://support.torproject.org/apt/tor-deb-repo/）；
第二步：安装好了后你得修改/etc/tor/torrc文件：添加或取消注释：SocksPort 9050
第三步：重启tor（对应了ss-local -c 命令）；
第四步：配置proxychains配置文件，然后就可以使用了。（Linux默认会配置127.0.0.1:9050，Linux简直就是为暗网而生）



——如何配置并使用TOR代理服务器（道理和一般的反向代理服务器一摸一样）——
第一步：你需要下载安装TOR代理程序；（对于服务器，universe的表现还不错，没出啥问题，当然还是建议手动安装）
第二步：安装好了后你得修改/etc/tor/torrc文件：添加或取消注释：
HiddenServiceDir /var/lib/tor/my_website/   # /var/lib/tor/my_website/是存储你的暗网站点信息用的，里面有一个文件叫hostname存储了.onion域名
HiddenServicePort 80 127.0.0.1:80   # 第一个80是TOR的对外接口就像nginx的公网端口80一样，第二个80的“127.0.0.1:80”是TOR反向代理的服务，就像你在nginx的配置文件的location里看到的“127.0.0.1:80一样”
第三步：重启tor（对应了ss-local -c 命令）；
第四步：拿.onion去TOR浏览器试一下，看看能不能通。