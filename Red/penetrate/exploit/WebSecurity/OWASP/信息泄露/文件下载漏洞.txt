零 又名信息泄露



一 漏洞成因（原理）
1 根本：一般就能在web服务器下载文件。如果不能下载，那么js、html、css这些文件就不可能传输到浏览器，那么网站就不能叫网站。

2 下载有两种方式（上传就只能写程序）：
（1）默认：你点击一条URL，就是下载文件。
（2）使用程序（header、readfile）实现。
注：在实际开发中一般使用第二种方式，直接把URL暴露给用户太不安全了，虽然使用第二种方式黑客也能fuzz到但是至少防止了非黑客用户的恶意行为。

3 黑客如何访问木马？（这个其实是文件上传漏洞的问题）用URL而不是下载按钮。对于一个正常的配置了phpfpm的nginx，直接使用URL访问木马文件，才能触发木马文件，如果使用程序员写的下载功能，那么就是下载而不触发木马文件。

4 突发思考：如果你直接访问php文件，那么不会下载php文件（因而不用幻想能拿到后端源码），而是请求php文件，但是除了php文件以外的其他文件都是可以下载下来的。

5 既然非php文件本来就能下载下来，那么怎样才算文件下载漏洞呢？
（1）如果用户在静态目录下放了不该放的敏感文件且location没有做好正则，将会造成敏感文件的泄露。
（2）目录越权：可以访问上级目录，甚至访问到根目录以外的目录，对于那些不知道名字的文件可以fuzz。







二 测试思路：
（一）明确漏洞点
1 链接形式：
download.php?path=
getfile?filename=
......
2 很多文件名的key会被定义为src、inputfile、file、filepath、path、data等等。



（二）设计poc并测试：
1 ../
2 fuzz



（三）如果有目录越权，看看能不能下载一些重要文件：
1 .ssh下的文件。
2 etc/passwd、etc/shadow、etc/my.cnf等。
3 /root/.bash+history
......







四 防护：
1 根本方式：静态资源与= /分离，采用严格的正则限制（路径和后缀，不允许php文件，不允许../）并禁止开发人员在静态资源目录存放任何敏感文件。

2 锦上添花：在php.ini里配置open_basedir限制用户访问/以外的目录和文件。