一 漏洞成因（原理）
1 开发场景：前端可能会将某个对象（尤其是JSON）的序列化字节流传给后端，后端拿到序列化字节流后对其反序列化拿到对象，继而对对象里的数据做操作。
2 漏洞成因：如果反序列化后，没有做好检测和过滤，就存在漏洞，这称为不安全的反序列化。
3 比如：对象里的值是被作为命令执行的却没有检测和过滤，那么就存在构造RCE的可能。
4 链：反序列化往往作为第一个漏洞，后续会触发RCE等漏洞，这就叫链。







二 测试思路
（一）测试点：前端的JSON、XML、字符串、二进制数据（这里已经是二进制安全了）等，总之就是数据，任何数据都有可能被反序列化。
注：Java的对象序列化后是二进制形式，但是脚本语言的对象序列化后往往表现为字符串，比如PHP的对象，请看下例：
<?php
class Example {
    public $name;
    
    public function __construct($name) {
        $this->name = $name;
    }
}

$example = new Example("Test");
$serialized = serialize($example);

echo $serialized;   // O:7:"Example":1:{s:4:"name";s:4:"Test";}
?>



（二）exp：有两个难点：
1 你不知道怎么构造？
这需要做一些模糊测试，然后看目标的错误信息和行为状态。

2 你不知道后端会拿数据成员做什么。
（1）尽量根据变量名或者key去猜功能。
（2）对象的构造和析构必会调用，这是poc的重点。
