一 版本







二 开发环境
（一）安装
1 手动
（1）在https://www.oracle.com/java/technologies/downloads/找一个wget；
（2）环境变量：
sudo vim /etc/profile
export JAVA_HOME=jdk的路径
export PATH=$PATH:$JAVA_HOME/bin
source /etc/profile
（3）检测：java -version

2 自动
sudo apt install default-jdk



（二）jdk整体认识：jdk是Java应用程序的开发环境
1 Java运行时环境（JRE）：
包含Java虚拟机（JVM）和Java类库，用于在计算机上运行Java程序。

2 编译器（javac）：
（1）gcc：用于将Java源代码（.java文件）编译成字节码文件（.class文件），字节码可以被JVM执行。
（2）so：Java本身并没有提供直接创建动态库的机制。Java主要依赖于JNI（Java Native Interface）来与本地代码（通常是用C或C++编写的）进行交互。在使用JNI时，通常是使用C或C++编写本地代码，并将其编译为动态库（如.so文件或.dll文件），然后通过Java代码加载和调用这些动态库。

3 调试器（jdb）：
提供了调试Java程序的工具，允许开发人员逐行调试程序并查看变量、堆栈等信息。

4 Javadoc工具：
用于生成API文档的工具，可以根据Java源代码中的特殊注释自动生成文档。

5 jar（jar包，相当于C语言的.a）
（1）通过对比jar和war来认识jar
【
jar 和 war 这两种格式都是Java应用程序常用的打包格式,但它们有一些重要的区别:
用途:
1
jar (Java Archive) 格式用于打包Java应用程序的类文件、资源文件等组件,主要用于打包标准的Java应用程序。
war (Web Application Archive) 格式专门用于打包Java Web应用程序,包含了Web应用程序的所有组件,如Servlet、JSP、HTML、CSS、JavaScript等。
2 部署环境:
jar 文件可以独立运行,也可以作为库被其他Java应用程序使用。
war 文件需要部署在Java Web容器或应用服务器上,如Tomcat、JBoss、Jetty等。
3 目录结构:
jar 文件遵循标准的Java类库目录结构,以com、org等包名划分文件夹。
war 文件有特定的目录结构,包括WEB-INF文件夹用于存放Web应用程序的配置和依赖。
my-webapp/
├── pom.xml (Maven 项目配置文件)
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           ├── controller/
│   │   │           ├── model/
│   │   │           ├── repository/
│   │   │           ├── service/
│   │   │           └── MyWebApp.java
│   │   ├── resources/
│   │   │   ├── application.properties
│   │   │   └── logback.xml
│   │   └── webapp/
│   │       ├── WEB-INF/
│   │       │   ├── web.xml
│   │       │   └── views/
│   │       │       ├── index.jsp
│   │       │       └── ...
│   │       ├── assets/
│   │       │   ├── css/
│   │       │   ├── js/
│   │       │   └── images/
│   │       └── index.html
│   └── test/
│       └── java/
│           └── com/
│               └── example/
│                   └── MyWebAppTests.java
└── target/
    ├── my-webapp.war
    └── ...
4 运行方式:
jar 文件可以通过Java命令直接执行。
war 文件需要部署在Web容器上,然后通过Web访问来运行Web应用程序。
】
（2）如何生成jar包？
a 正常：jar cf myapp.jar *.class
    c：表示“create”，用于创建一个新的 JAR 文件。
    f：表示“file”，用于指定输出的 JAR 文件的名称。
b 生成带有MANIFEST.MF（用于存储jar包的源信息）的jar包：jar cmf MANIFEST.MF myapp.jar *.class
c 添加资源文件：jar uf myapp.jar resource_files
    u：表示“update”，用于更新已存在的 JAR 文件。
    f：表示“file”，用于指定要更新的 JAR 文件的名称。
（3）如何使用jar包？
a jar要是带有psvm（相当于python的”if __name__ == "__main__":“），它就能直接运行：
java -jar myapp.jar
b 如果没有psvm则不能直接运行，可以先将其放到目录下以供其他程序调用：（目前还没弄懂）
java -cp com.example.MyMainClass myapp.jar
cp是classpath

6 jconsole：Java监视和管理控制台。



三 Java语法
（零）包：最大的概念，就是目录。
（一）Java文件
1 一个.class文件只能有一个public类，如果有其他类，它们可以是 default（包级别或默认级别）或 private（内部类），但不能是 public。
2 这个 public 类的名字必须与 .java 文件的名字匹配。
3 这个public类不是必须有，public意味着可以被任何其他文件访问。
4 包级别或默认级别：如果一个类、字段、方法或构造函数没有使用 public、protected 或 private 修饰符，它的访问级别就是包级别的即在一个包里访问。 
（二）程序执行入口：
1 固定写法
class MyClass {
    public static void main(String[] args) {
        System.out.println("Hello from MyClass!");
    }
}
2 可以在任何文件的任何类中，java该文件就从这开始执行。



四 Java库
（一）标准库：
1 java
java.lang

基本的语言功能（如基本数据类型、字符串、线程等）。
包括 Object、String、Math、Thread、System 等。
java.util

数据结构和集合框架。
包括 List、Map、Set、Queue 及其实现类（如 ArrayList、HashMap 等）、日期和时间 API（如 Date、Calendar）。
java.io

输入输出操作，包括文件操作、数据流等。
包括 InputStream、OutputStream、Reader、Writer、File 等。
java.nio

新的输入输出（NIO）操作，提供更高效的文件和网络 I/O。
包括 ByteBuffer、FileChannel、Path、Files、Selectors 等。
java.net

网络编程，包括套接字、URL 等。
包括 Socket、ServerSocket、URL、HttpURLConnection 等。
java.sql

JDBC（Java 数据库连接）API，用于数据库操作。
包括 Connection、Statement、ResultSet、DriverManager 等。
java.security

安全性相关功能，包括加密、认证等。
包括 MessageDigest、KeyStore、Cipher、SecureRandom 等。
java.awt 和 javax.swing

图形用户界面（GUI）工具包。
java.awt 包含基本的图形和用户界面元素。
javax.swing 提供更丰富的 GUI 组件（如 JButton、JFrame）。
java.math

数学操作，包括大数和精确计算。
包括 BigInteger、BigDecimal 等。
java.util.concurrent

并发编程工具。
包括 ExecutorService、CountDownLatch、Semaphore、ConcurrentHashMap 等。
java.time (从 Java 8 开始)

新的日期和时间 API。
包括 LocalDate、LocalTime、LocalDateTime、ZonedDateTime 等。
2 javax（java的扩展库）
javax.xml

XML 处理，包括解析、转换和绑定。
包括 DocumentBuilder、Transformer、SAXParser、DOMParser 等。
javax.persistence

Java 持久化 API（JPA），用于对象关系映射。
包括 EntityManager、EntityTransaction、Query 等。
javax.jms

Java 消息服务（JMS），用于消息传递。
包括 ConnectionFactory、Queue、Topic、MessageProducer 等。
javax.servlet

Java Servlet API，用于开发 web 应用。
包括 Servlet、HttpServlet、ServletRequest、ServletResponse 等。
javax.mail

Java 邮件 API，用于处理电子邮件。
包括 Session、Message、Transport、Store 等。
javax.validation

Bean 验证 API，用于对象属性的验证。
包括 Validator、ConstraintViolation 等。
javax.websocket

WebSocket API，用于构建实时双向通信的 web 应用。
包括 WebSocket、Session、Endpoint 等。
javax.rmi

Java RMI（远程方法调用）API，用于分布式对象通信。
包括 Naming、Remote、RemoteException 等。
javax.crypto

Java 加密 API，用于加密和解密操作。
包括 Cipher、SecretKey、KeyGenerator 等。
（二）spring