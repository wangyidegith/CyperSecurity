0 这是前端开发，我们也经常写网络应用程序了，一个网络应用程序往往是C/S结构即有前端和后端，中间是协议，那么，你应该该明白了：不是说一个网络应程序的前后端或者分布式程序的每个机器上的一端必须得使用同一语言才能工作起来，只要是协议能够通信就行了。
1 SDK：对于CCPP开发而言，Linux就是一个SDK，对于Android开发而言，Android就是一个SDK。
2 因而就如同学习CCPP开发需要先学Linux一样，学Android开发需要先学Android：
最底层是Linux内核。
Linux内核往上是一个虚拟机层，包含核心库（媒体框架、SQLite、WebCore、SSL、Libc等）和Dalvik虚拟机。
虚拟机层往上是应用程序框架，对于Android开发程序员而言，这一层就需要学习了（下面这两层不需要管），包含各种管理器（有的地方也把它们叫APP组件）。
最上层就是APP了。
3 框架层或者说管理器层说白了就像socket层一样是APP和内核之间的接口层（在APP中，AndroidManifest.xml描述了应用程序的每个组件，以及他们如何交互），主要有以下组件：
（1）Activities
a 概念：一个活动标识一个具有用户界面的单一屏幕。
b 举个例子，一个邮件应用程序可以包含一个活动用于显示新邮件列表，另一个活动用来编写邮件，再一个活动来阅读邮件。当应用程序拥有多于一个活动，其中的一个会被标记为当应用程序启动的时候显示。
c 示例用法：
public class MainActivity extends Activity {

}
（2）Services
a 概念：服务是运行在后台，执行长时间操作的组件。
b 举个例子，服务可以是用户在使用不同的程序时在后台播放音乐，或者在活动中通过网络获取数据但不阻塞用户交互。
c 示例用法：
public class MyService extends Service {

}
（3）Broadcast Receivers
a 概念：广播接收器简单地响应从其他应用程序或者系统发来的广播消息。
b 举个例子，应用程序可以发起广播来让其他应用程序知道一些数据已经被下载到设备，并且可以供他们使用。因此广播接收器会拦截这些通信并采取适当的行动。
c 广播接收器是BroadcastReceiver类的一个子类，每个消息以Intent对象的形式来广播。
d 示例用法：
public class MyReceiver  extends  BroadcastReceiver {

}
（4）Content Providers
a 概念：内容提供者组件通过请求从一个应用程序到另一个应用程序提供数据。
b 这些请求由ContentResolver类的方法来处理。
c 这些数据可以是存储在文件系统、数据库或者其他其他地方。
d 内容提供者是ContentProvider类的子类，并实现一套标准的API，以便其他应用程序来执行事务。
e 示例用法：
public class MyContentProvider extends  ContentProvider {

}
（5）以下是四大组件的附件组件：
组件	描述
Fragments	代表活动中的一个行为或者一部分用户界面。
Views	绘制在屏幕上的UI元素，包括按钮，列表等。
Layouts	控制屏幕格式，展示视图外观的View的继承。
Intents	组件间的消息连线。
Resources	外部元素，例如字符串资源、常量资源及图片资源等。
Manifest	应用程序的配置文件。

