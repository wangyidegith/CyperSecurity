一 基本问题
1 版本
5：弃用
7：最广泛
8：最新



二 开发环境（搭建LAMP环境。如何运行？最好直接在web服务器里看效果，也可以在命令行是要php命令运行）
1 容器：
sudo apt update
sudo apt install apache2
sudo systemctl status apache2 or 在浏览器访问http://server-ip
2 数据库：
sudo apt install mysql-server
sudo systemctl status mysql
3 PHP：
sudo apt install php libapache2-mod-php php-mysql
sudo systemctl restart apache2
4 验证安装：
echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/phpinfo.php
在浏览器访问：http://server-ip/phpinfo.php



三 语法
（零）基本问题：
1 注释：和C语言一样，但是多了一个文档注释：
/**
 * 函数用于计算两个数的和
 *
 * @param int $a 第一个操作数
 * @param int $b 第二个操作数
 * @return int 返回两个数的和
 */
function add($a, $b) {
    return $a + $b;
}
2 变量定义语法：变量名必须以美元符号 $ 开头，后面紧跟着变量名，例如 $name, $age, $is_valid。
（一）运算和控制
1 控制（和C语言一样）
（1）顺序
（2）条件，else if 变成了elseif
（3）循环，多了个foreach-as
<?php
    $numbers = [1, 2, 3, 4, 5];
    foreach ($numbers as $number) {
        echo $number;
    }
?>
2 运算
（1）==是只比字面值，===是也比类型，这个在弱类型语言中是常见的。
（二）数据
1 基本数据类型
（1）数字（整数、浮点）
（2）布尔：true false
（3）字符串：
a 字面量：
（a）单行：''
（b）多行：<<<'EOT'EOT;
$str4 = <<<'EOT'
This is also a long
multi-line
string, but variables are not parsed.
EOT;
b 解析：
（a）单行：""
（b）多行：
$str3 = <<<EOT
This is a long
multi-line
string.
EOT;
（4）null
（5）数组
a 索引数组：
<?php
$colors = array("Red", "Green", "Blue");
// 或者使用更现代的写法
$colors = ["Red", "Green", "Blue"];
echo $colors[0]; // 输出 Red
echo $colors[1]; // 输出 Green
echo $colors[2]; // 输出 Blue
?>
b 关联数组：
$person = array("name" => "John", "age" => 30, "city" => "New York");
// 或者使用更现代的写法
$person = ["name" => "John", "age" => 30, "city" => "New York"];
echo $person["name"]; // 输出 John
echo $person["age"]; // 输出 30
echo $person["city"]; // 输出 New York
2 构造数据类型
（1）函数：和JavaScript很相似
<?php
    // 函数定义与调用示例，不知道有没有表达式定义法
    function greet($name) {
        return "Hello, $name!";
    }

    echo greet("Bob");
?>
c 多维数组（注意区分：JavaScript的=>是用来定义箭头函数用的）：
$employees = array(
    array("name" => "John", "age" => 30, "position" => "Manager"),
    array("name" => "Jane", "age" => 25, "position" => "Developer")
);
echo $employees[0]["name"]; // 输出 John
echo $employees[1]["position"]; // 输出 Developer
（2）对象（和cpp非常相似；new创建对象，没有cpp的栈创建对象方法。）
1 封装：
（1）class，public，protected，private。
（2）构造函数和析构函数：
class MyClass {
    public function __destruct() {
        // 执行清理操作，释放资源等
    }
    public function __destruct() {
        // 执行清理操作，释放资源等
    }
}
2 继承：extends，就是public继承。
3 多态：所有函数直接重写就行，不用想cpp那样用virtual声明。
（1）抽象类：
// 示例：抽象类
abstract class Animal {
    abstract public function makeSound();
}

class Dog extends Animal {
    public function makeSound() {
        echo "Woof!";
    }
}
（2）接口：
// 示例：接口
interface Shape {
    public function draw();
}

class Circle implements Shape {
    public function draw() {
        echo "Drawing a circle";
    }
}
（3）二者区别：
1 方法实现：
抽象类可以包含具体方法的实现，也可以包含抽象方法（没有实现代码的方法）。子类继承抽象类时，可以选择性地实现抽象方法，也可以直接继承具体方法的实现。
接口只能包含方法声明，但不能包含方法的实现。实现接口的类必须提供接口中声明的所有方法的具体实现。
2 多继承：
抽象类在PHP中支持单继承，一个类只能继承自一个抽象类。
接口支持多继承，一个类可以实现多个接口。
3 包含内容：
抽象类可以有成员变量，可以有普通方法（非抽象方法）。
接口不能包含成员变量或普通方法，只能包含常量和方法的声明。
4 使用场景：
抽象类适合于那些有共同特性和行为的类，可以为这些类提供一个通用的父类。抽象类可以包含一些具体的实现，子类可以直接继承这些实现或者覆盖它们。
接口适合于描述对象的能力而不关心对象的内部数据。如果多个不相关的类需要实现相同的行为，可以通过接口来实现，从而提供一种标准的方法集合。



四 内置函数
（零）常见
isset() 是 PHP 的一个函数，用于检查一个变量是否已定义并且其值不为 null。如果变量存在且不为 null，isset() 返回 true，否则返回 false。
（一）字符串
strlen(string $string): int：获取字符串长度
substr()：截取字符串
strpos(string $haystack, mixed $needle, int $offset = 0): int|false：查找字符串位置
strtolower()/strtoupper()：转换大小写
trim()/ltrim()/rtrim()：去除字符串两侧/左侧/右侧的空白字符
（二）数组
0 count
count(array|Countable $value, int $mode = COUNT_NORMAL): int: 计算数组的元素个数
$value: 要计数的数组或实现了 Countable 接口的对象。
$mode: (可选参数)指定计数的模式。可以取以下值:
COUNT_NORMAL(默认值): 返回元素的总数。
COUNT_RECURSIVE: 递归计算多维数组中的元素数量。
COUNT_SOFT: 仅计算可枚举的元素。
1 创建
（1）标准但不用的方法：array(array $elements): array: 创建一个新数组。
（2）旧方法：
$array1 = array(); // 创建一个空数组

$array2 = array(1, 2, 3, 4, 5); // 创建一个带有初始值的索引数组

$array3 = array(
    'name' => 'John',
    'age' => 30,
    'city' => 'New York'
); // 创建一个关联数组
（3）新方法：
$array4 = []; // 创建一个空数组

$array5 = [1, 2, 3, 4, 5]; // 创建一个带有初始值的索引数组

$array6 = [
    'name' => 'Jane',
    'age' => 25,
    'city' => 'Los Angeles'
]; // 创建一个关联数组
array_fill(int $start_index, int $num, mixed $value): array: 用指定的值填充一个数组。
range(mixed $start, mixed $end, number $step = 1): array: 根据指定的范围创建一个整数数组。
2 增删查改
增删：
array_push(array &$array, mixed $values, ...): int: 尾增
array_pop(array &$array): mixed: 尾删
array_unshift(array &$array, mixed $values, ...): int: 头增
array_shift(array &$array): mixed: 头删
查：
$array[]: 访问或设置数组元素。
in_array(mixed $needle, array $haystack, bool $strict = false): bool: 检查数组中是否存在某个值。（needle是要查的元素名，haystack是数组，strict为false意味着只检查字面值不检查数据类型，为true意味着也检查数据类型）
array_key_exists(mixed $key, array $array): bool: 检查数组中是否存在某个键名。
array_search(mixed $needle, array $haystack, bool $strict = false): false|string|int: 在数组中搜索给定的值,并返回对应的键名（看见返回值是string了吗？这是符合JSON语法的）。
改（可用于中间增删）：
array_splice(array &$array, int $offset, ?int $length = null, mixed $replacement = null): array: 从数组中添加或删除元素
```
<?php
$fruits = ['apple', 'banana', 'cherry', 'date', 'elderberry'];
// 从索引 1 开始删除 2 个元素
array_splice($fruits, 1, 2);
print_r($fruits);
// 输出: Array ( [0] => apple [2] => date [3] => elderberry )

// 从索引 -2 开始删除 1 个元素
array_splice($fruits, -2, 1);
print_r($fruits);
// 输出: Array ( [0] => apple [1] => date )

// 从索引 1 开始删除 1 个元素,并插入新元素
array_splice($fruits, 1, 1, ['grape', 'kiwi']);
print_r($fruits);
// 输出: Array ( [0] => apple [1] => grape [2] => kiwi [3] => date )
?>
```
3 数组排序（每个都是sort这种参数表结构）
sort(array &$array, int $flags = SORT_REGULAR): bool: 对数组进行升序排序。
rsort(): 对数组进行降序排序。
asort(): 保持键名关联的情况下对数组进行升序排序。
arsort(): 保持键名关联的情况下对数组进行降序排序。
ksort(): 按键名升序排序数组。
krsort(): 按键名降序排序数组。
4 数组操作
array_merge(array $array1, array $array2, ...): array
array_rand(array $array, int $num = 1): mixed: 从一个数组随机产生一个数组（num > 1）或者一个元素（num == 1），mixed指可以是元素也可以是数组。
array_slice(array $array, int $offset, ?int $length = null, bool $preserve_keys = false): array: 从一个数组中截取一个数组出来
array_unique(array $array, int $flags = SORT_STRING): array: 移除数组中重复的值。
array_diff(array $array1, array $array2, ...$array_n): array计算数组的差集。
array_intersect(array $array1, array $array2, ...$array_n): array: 计算数组的交集。
array_flip(array $array): array: 交换数组中的键和值。
（三）文件
fopen()/fread()/fwrite()/fclose()：打开、读取、写入、关闭文件
file_exists()：检查文件是否存在
unlink()：删除文件
basename：从文件路径字符串中提取文件名。
（四）数据库
mysqli_connect()：连接数据库
mysqli_query()：执行 SQL 查询
mysqli_fetch_assoc()：获取查询结果集



五 文件包含
（一）
include
include_once
require
require_once
（二）区别：
1 reuqire如果在包含的过程中有错，比如文件不存在等，则会直接退出，不执行后续语句，include并不会中断执行。
2 once只包含一次。
（三）用的最多的是include_once。
（四）这是文件包含漏洞的根源。



六 HTTP
（一）接收请求（使用超全局变量，下面六个都是关联数组，前五个的key是固定的，$_SERVER不固定）
1 $_GET
用于获取通过URL参数传递的数据。
示例：$_GET['param_name']
2 $_POST
用于获取通过POST方法传递的数据。
示例：$_POST['param_name']
3 $_COOKIE
用于获取通过Cookie传递的数据。
示例：$_COOKIE['cookie_name']
4 $_REQUEST
包含了$_GET、$_POST 和$_COOKIE 的内容，这个不是很好，不明确，尽量不要用。
示例：$_REQUEST['param_name']
5 $_SESSION
用于存储和获取会话变量。
示例：$_SESSION['session_var']
6 $_SERVER
包含了服务器环境中的信息。
示例：
（1）HTTP 请求信息：
$_SERVER['HTTP_HOST']: 当前请求的主机名。
$_SERVER['HTTP_USER_AGENT']: 用户代理头，即浏览器信息。
$_SERVER['HTTP_REFERER']: 引导用户代理到当前页的前一页的地址（如果有）。
$_SERVER['HTTP_ACCEPT_LANGUAGE']: 用户代理头中可接受内容的首选语言列表。
$_SERVER['HTTP_CONNECTION']: 当前连接状态。
$_SERVER['REQUEST_URI']: 用户请求的URI。
等等，还有其他与 HTTP 请求相关的头信息。
（2）服务器信息：
$_SERVER['SERVER_ADDR']: 当前运行脚本所在的服务器的 IP 地址。
$_SERVER['SERVER_NAME']: 当前运行脚本所在的服务器的主机名。
$_SERVER['SERVER_SOFTWARE']: 服务器标识字符串，如 Apache/2.4.29 (Unix) PHP/7.2.22。
$_SERVER['SERVER_PROTOCOL']: 请求页面时通信协议的名称和版本，例如 "HTTP/1.0"。
$_SERVER['SERVER_PORT']: 服务器端口号。
等等，还有其他与服务器相关的信息。
（3）脚本信息：
$_SERVER['SCRIPT_NAME']: 当前脚本的路径。
$_SERVER['SCRIPT_FILENAME']: 当前执行脚本的绝对路径。
$_SERVER['PHP_SELF']: 当前执行脚本的文件名。
$_SERVER['REQUEST_METHOD']: 请求使用的方法，如 "GET", "POST" 等。
等等，还有其他与当前 PHP 脚本执行相关的信息。
（4）客户端信息：
$_SERVER['REMOTE_ADDR']: 发出 HTTP 请求的 IP 地址。
$_SERVER['REMOTE_PORT']: 客户端端口号。
$_SERVER['REMOTE_HOST']: 客户端主机名（如果启用）。
$_SERVER['REMOTE_USER']: 对应于身份验证的用户名（如果启用）。
等等，还有其他与客户端相关的信息。
（二）处理：
1 $_FILES
（1）$_FILES = array(
    'file_field_name' => array(
        'name' => 'original_filename.ext',   // 初始路径，需要用basename函数获取文件名
        'type' => 'file/type',   // 文件类型
        'tmp_name' => '/tmp/php123456.tmp',   // 初始路径
        'error' => UPLOAD_ERR_OK,
        'size' => 12345   // 文件大小
    )
)
（2）是一个二维数组，里外都是关联数组。
（三）发送响应：PHP的输出函数就是把信息传到浏览器（真不愧是web服务器专用脚本语言）
1 echo print
可以使用.连接字符串就像Java语言的+一样。
2 先存再输出（还是用到了echo）：
<?php
ob_start(); // 开始输出缓冲
echo "Hello, World!";
// 其他处理
ob_end_flush(); // 发送缓冲区内容到浏览器并关闭缓冲
?>