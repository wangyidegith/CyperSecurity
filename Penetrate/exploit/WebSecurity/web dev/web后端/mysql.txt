零 安装及基本操作
（零）安装
0 sudo apt update

1 sudo apt install mysql-server

2 sudo mysql_secure_installation

3 sudo systemctl start mysql

4 sudo systemctl enable mysql



（一）基本操作
0 不区分大小写。

1 导入导出
（0）导入sql文件到某个数据库
a 在mysql里执行：
source .sql路径;
b 在shell执行：mysql -u 用户名 -ppasswd 数据库名 < .sql文件
（1）如何导出一个数据库：
在shell执行：mysqldump -u 用户名 -ppasswd 数据库名 > 导出文件.sql

2 查看MySQL版本
SELECT version();

3 注释
（1）单行：#后面不需要空格，--后面需要空格。
（2）多行：/**/

4 如何退出：exit or quit。







一 用户
（零）创建用户
0 CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';

1 GRANT ALL PRIVILEGES ON *.* TO 'user'@'localhost' WITH GRANT OPTION;



（一）登录
0 mysql -u 用户名 -p
然后输入密码后进入 MySQL 命令行界面

1 mysql -u 用户名 -ppasswd [database]

注意：-p和passwd之间不能由空格！



（二）杂项
0 其他如何获取当前用户名？
SELECT user();

1 如何查询所有用户？
SELECT User FROM mysql.user;







# 下面的全是mysql命令。
二 数据库操作
1 查看所有数据库
SHOW DATABASES;

2 查看自己当前在哪个数据库
SELECT database();

3 创建数据库
CREATE DATABASE 数据库名;

4 删除数据库
DROP DATABASE 数据库名;

5 选择数据库
USE 数据库名;

6 查看所有表
SHOW TABLES;

7 如何修改数据库名？不能修改。






三 表操作
1 创建表
（1）CREATE TABLE 表名 ( 列名1 数据类型 属性, 列名2 数据类型 属性,... );
注意：
a ()内部以每个字段（即每一，专业名词叫field翻译为字段），包含三个部分，每个部分都以空格分开。
b 一般就认为属性即约束，在MySQL中叫CONSTRAINT，有：
PRIMARY KEY: 唯一标识表中的每一行，经常会使用AUTO_INCREMENT让主键自增长。
关于主键（PRIMARY KEY）有几点要强调：一是它自带UNIQUE和NOT NULL，二是一张表只能有一个主键，但是可以多个字段联合为一个主键，这又叫复合主键。
例：
CREATE TABLE OrderDetails (
    OrderID INT,
    ProductID INT,
    Quantity INT,
    PRIMARY KEY (OrderID, ProductID)
);
FOREIGN KEY: 确保表中的数据与其他表的数据一致。
UNIQUE: 确保列中的每个值都是唯一的。
NOT NULL: 确保列中没有空值。（这是一个特殊的约束，MySQL不把它当约束而是属性，因为它在修改时用的modify）
CHECK: 验证列中的值是否满足某些条件。
DEFAULT: 为列提供默认值。（也是属性）
例：
两种创建方式：
第一种：
CREATE TABLE Products (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(100) UNIQUE NOT NULL,
    Price DECIMAL(10, 2) CHECK (Price >= 0),
    Stock INT DEFAULT 0
);
第二种(这种形式可以给约束取个名字)：
CREATE TABLE Employees (
    EmployeeID INT,
    Name VARCHAR(50) NOT NULL,
    Department VARCHAR(50),
    Salary DECIMAL(10, 2),

    -- 主键约束
    CONSTRAINT PK_Employees PRIMARY KEY (EmployeeID),

    -- 唯一约束
    CONSTRAINT UQ_Name UNIQUE (Name),

    -- 检查约束
    CONSTRAINT CK_Salary CHECK (Salary >= 0),

    -- 外键约束示例 (假设有另一个表 DepartmentDetails)
    CONSTRAINT FK_Department FOREIGN KEY (Department) REFERENCES DepartmentDetails(DepartmentName)
);
（2）数据类型：
-------
1. 数值数据类型
整数类型：
TINYINT：存储1字节的整数（-128到127，或0到255）
SMALLINT：存储2字节的整数（-32,768到32,767，或0到65,535）
MEDIUMINT：存储3字节的整数（-8,388,608到8,388,607，或0到16,777,215）
INT：存储4字节的整数（-2,147,483,648到2,147,483,647，或0到4,294,967,295）
BIGINT：存储8字节的整数（-9,223,372,036,854,775,808到9,223,372,036,854,775,807，或0到18,446,744,073,709,551,615）
浮点类型：
FLOAT：存储单精度浮点数（大约7位十进制数字的精度）
DOUBLE：存储双精度浮点数（大约15位十进制数字的精度）
定点类型：
DECIMAL：存储定点数，精度可以指定。用于高精度的数值计算，例如货币。
2. 字符串数据类型
定长字符串：
CHAR(M)：存储长度为M的字符串，不足部分用空格填充。M的范围是1到255。
变长字符串：
VARCHAR(M)：存储长度可变的字符串，M的范围是1到65,535。
文本类型：
TINYTEXT：存储最大255字节的文本。
TEXT：存储最大65,535字节的文本。
MEDIUMTEXT：存储最大16,777,215字节的文本。
LONGTEXT：存储最大4,294,967,295字节的文本。
二进制类型：
BINARY(M)：存储固定长度的二进制数据。
VARBINARY(M)：存储变长的二进制数据。
TINYBLOB：存储最大255字节的二进制数据。
BLOB：存储最大65,535字节的二进制数据。
MEDIUMBLOB：存储最大16,777,215字节的二进制数据。
LONGBLOB：存储最大4,294,967,295字节的二进制数据。
3. 日期和时间数据类型
日期类型：
DATE：存储日期（格式：YYYY-MM-DD）
时间类型：
TIME：存储时间（格式：HH:MM:SS）
日期时间类型：
DATETIME：存储日期和时间（格式：YYYY-MM-DD HH:MM:SS）
TIMESTAMP：存储日期和时间，与时区有关（格式：YYYY-MM-DD HH:MM:SS）
年类型：
YEAR：存储年份（格式：YYYY）
4. 布尔类型
布尔类型：
BOOLEAN 或 BOOL：存储布尔值（TRUE 或 FALSE）
5. 其他数据类型
JSON类型：
JSON：存储JSON格式的数据。
枚举：
ENUM('value1', 'value2', ...)：存储预定义的枚举值，只能是定义中的一个。
集合
SET('value1', 'value2', ...)：存储预定义的集合值，可以是定义中任意多个值的组合。
-------
（3）属性：
NOT NULL

2 删除表
DROP TABLE 表名;

3 展现表的结构
DESC 表名;

4 改表的结构：
（1）添加列
ALTER TABLE table_name ADD column_name column_type;
（2）删除列
ALTER TABLE table_name DROP COLUMN column_name;
（3）修改列的数据类型
ALTER TABLE table_name MODIFY column_name new_column_type;
（4）重命名列
8.0版本以上：ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;
各版本：ALTER TABLE table_name CHANGE old_column_name new_column_name column_type;
（5）添加约束
有名字：ALTER TABLE table_name ADD CONSTRAINT constraint_name constraint (column_name);
无名字：ALTER TABLE table_name ADD contraint (column_name);
注：无名字添加也会有默认名字，UNIQUE也叫index，其名字一般是字段名，外键不知道得去查，主键不重要，可以使用如下方法查询约束的名字：
查询index名：
SELECT INDEX_NAME
FROM information_schema.STATISTICS
WHERE TABLE_SCHEMA = 'your_database_name'
  AND TABLE_NAME = 'table_name'
  AND NON_UNIQUE = 0;
查询外键名：
SELECT CONSTRAINT_NAME
FROM information_schema.KEY_COLUMN_USAGE
WHERE TABLE_SCHEMA = 'your_database_name'
  AND TABLE_NAME = 'table_name'
  AND REFERENCED_TABLE_NAME IS NOT NULL;
（6）删除约束
删除UNIQUE：
ALTER TABLE table_name DROP INDEX constraint_name;
有的数据库可以这样删除： ALTER TABLE table_name DROP CONSTRAINT constraint_name;
删除外键：ALTER TABLE table_name DROP FOREIGN KEY foreign_key_name;
删除主键（只能有一个所以名字无所谓，有其他属性比如AUTO_INCREMENT时删不掉得先去掉AUTO_INCREMENT再删）：ALTER TABLE table_name DROP PRIMARY KEY;
（7）如何修改属性？（和修改列的数据类型一样）
ALTER TABLE table_name MODIFY column_name data_type NOT NULL;

5 如何修改表名？
RENAME TABLE old_table_name TO new_table_name;








四 数据操作
（一）基本操作
1 插入数据
INSERT INTO 表名 (列名1, 列名2, ...) VALUES (值1, 值2, ...),(值1, 值2, ...)...;

2 查询数据
SELECT * FROM 表名;
SELECT 列名1, 列名2 FROM 表名;
SELECT * FROM 表名 WHERE 条件;

3 更新数据
UPDATE 表名 SET 列名1=值1, 列名2=值2, ... WHERE 条件;

4 删除数据
DELETE FROM 表名 WHERE 条件;



（二）高级操作
1 limit：
（1）limit <num>
前多少行。
（2）limit <offset,num>
从第offset + 1开始的多少行。
2 offset
举例：
SELECT * FROM employees
LIMIT 10 OFFSET 10;
解释：从第11行开始的10行，== limit 10,10







四 多表操作
1 union：只能用于select。
2 外键







五 内置变量和函数
（一）变量
1 展示所有变量：show global variables;

2 展示某个变量：select @@var_name;

3 常见：
version_compile_os
version



（二）函数
version()
user()
database()
now()







六 内置数据库和表
（一）mysql：
1 存储MySQL服务器运行所需要的各种信息。

2 比如著名的user表，记录了MySQL的用户的用户名、密码等信息。



（二）performance_schema
1 用于在低级别监视MySQL服务器执行，提供了一种在运行时检查服务器内部执行的方法。

2 内存表。



（三）information_schema（可取代SHOW）
1 只读表。

2 表的内容是各个自定义数据库的元信息。

3 著名表：
（1）TABLES：所有自定义数据库的表的元信息。
每行都是一个表的元信息。
主要字段有：TABLE_SCHEMA、TABLE_NAME等。
比如查找某个数据库有哪些表？SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA='daname';



（四）sys：主要是通过视图的形式把information_schema和performance_schema结合起来，帮助系统管理员和开发人员监控MySQL的技术性能。



