一 名称歧义。



二 原理
1 漏洞成因：
输入输出都没有过滤，导致黑客注入JavaScript代码。
2 注入点：和SQL注入不一样的地方在于，XSS攻击的是客户端，除了注入点以外，被注入的payload必须被显示在页面，因而对于那些既有输入又有展示的注入点，优先考虑XSS。
3 危害（JavaScript能做到什么效果，XSS的胃口就有多大。）
（1）cookie获取
（2）钓鱼
（3）挂马
（4）有局限的键盘记录
4 三种类型：
（1）存储型（一般中高危）：
payload会存在后台数据库，等待其他用户触发。
是持久型XSS。
（2）反射型（就是echo，一般中低危）：
有交互但不存储。
是非持久型XSS。
（3）DOM型（很多src都不认可这种漏洞）：
不与后台服务器产生交互（是指payload不与服务器交互而不是真的就不和服务器交互）。
可能一次性可能持久。
完全没有网络交互的DOMXSS攻击没有意义。



三 测试手法
（一）手动
1 对于存储型和反射型直接用最简单的用<script>alert("xss");</script>最多，其实用什么都行，只要能体现效果就行，比如<a href="">xss</a>、<img src="#" onmouseover="alert('xss')">等等.
2 如遇长度限制，是可以改的，或者直接用bp。
3 对于DOM型，要注意，<script>在除了<body>和<head>的其他地方都不能执行，所以很多时候就算你闭合的很好也没用，一般以onclick='alert("xss");'（具体构造具体再说）进行测试。
4 一般测试方法：
（1）' ""><script>alert("xss");</script>
（2）" ''><script>alert("xss");</script>
5 常见payload：  
（二）自动：
APPscan、AWVS、xray等大型漏扫，xsstrike等自动化小工具。



四 测试思路
（一）测试点：
（二）详见上面测试手法。
（三）利用（一旦有漏洞，剩下的就是看你会不会写JavaScript了）：
1 持久型：你直接注入就行了。
2 非持久型（反射型和DOM型）：你构造一条URL链接然后发给你受害者骗他点（1这得是GET 2这得带点社工）。



五 防御




六 xsslab靶场
（一）
1 类型：反射型。
2 测试：<script>alert("xss");</script>
3 源码：未作任何防御。
（二）
1 类型：反射型
2 测试：' ""><script>alert("xss");</script> or " ''><script>alert("xss");</script>
3 源码：<input name=keyword  value="'.$str.'">
（三）
1 类型：反射型
2 测试：str' onclick='alert("xss")' or str' onclick='javascript:alert("xss")'
（1）可以使用各种事件。
（2）事件属性名不区分大小写。
3 源码：<input name=keyword  value='".htmlspecialchars($str)."'>
（四）
1 类型：反射型（和三是单双引号的区别）
2 测试：str" onclick='alert("xss")' or str" onclick='javascript:alert("xss")'
3 源码：<input name=keyword  value="'.$str3.'">
（五）
1 类型：反射型
2 测试：str" ><a href="javascript:alert('xss')">baidu</a>
3 源码：做了一个过滤，将on和<script中间加一_以避免前端解析。
$str2=str_replace("<script","<scr_ipt",$str);
$str3=str_replace("on","o_n",$str2);